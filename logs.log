2023-06-02 15:36:17,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:17,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:17,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:17,139:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:18,336:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:36:20,410:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:36:28,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:28,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:28,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:28,078:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:36:28,860:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:36:30,613:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:37:24,160:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:24,160:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:24,160:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:24,160:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:24,842:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:37:26,206:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:37:55,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:55,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:55,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:55,702:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:37:56,462:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:37:57,867:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:39:02,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:02,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:02,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:02,454:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:03,203:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:39:04,711:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:39:24,161:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:24,161:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:24,161:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:24,161:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:39:24,884:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:39:26,162:WARNING:E:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:41:00,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:41:00,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:41:00,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:41:00,140:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:41:00,928:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:41:02,275:WARNING:E:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:44:41,650:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:44:41,650:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:44:41,650:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:44:41,650:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:44:42,338:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:44:43,647:WARNING:E:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:45:10,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:10,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:10,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:10,911:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:11,669:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:45:13,189:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:45:47,848:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:47,848:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:47,848:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:47,848:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:48,757:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:45:50,221:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 15:45:57,398:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:57,398:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:57,398:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:57,398:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 15:45:58,146:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 15:45:59,557:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 16:57:14,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:57:14,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:57:14,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:57:14,814:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:57:15,928:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 16:57:17,783:INFO:PyCaret RegressionExperiment
2023-06-02 16:57:17,783:INFO:Logging name: reg-default-name
2023-06-02 16:57:17,784:INFO:ML Usecase: MLUsecase.REGRESSION
2023-06-02 16:57:17,784:INFO:version 3.0.2
2023-06-02 16:57:17,784:INFO:Initializing setup()
2023-06-02 16:57:17,784:INFO:self.USI: 1f9a
2023-06-02 16:57:17,784:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'X', 'html_param', 'X_test', 'log_plots_param', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id', 'transform_target_param'}
2023-06-02 16:57:17,784:INFO:Checking environment
2023-06-02 16:57:17,784:INFO:python_version: 3.9.12
2023-06-02 16:57:17,784:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 16:57:17,784:INFO:machine: AMD64
2023-06-02 16:57:17,817:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 16:57:17,821:INFO:Memory: svmem(total=8345964544, available=1069707264, percent=87.2, used=7276257280, free=1069707264)
2023-06-02 16:57:17,822:INFO:Physical Core: 2
2023-06-02 16:57:17,822:INFO:Logical Core: 4
2023-06-02 16:57:17,822:INFO:Checking libraries
2023-06-02 16:57:17,822:INFO:System:
2023-06-02 16:57:17,822:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 16:57:17,822:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 16:57:17,822:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 16:57:17,822:INFO:PyCaret required dependencies:
2023-06-02 16:57:17,822:INFO:                 pip: 21.2.4
2023-06-02 16:57:17,823:INFO:          setuptools: 61.2.0
2023-06-02 16:57:17,823:INFO:             pycaret: 3.0.2
2023-06-02 16:57:17,823:INFO:             IPython: 8.2.0
2023-06-02 16:57:17,824:INFO:          ipywidgets: 7.6.5
2023-06-02 16:57:17,824:INFO:                tqdm: 4.64.0
2023-06-02 16:57:17,824:INFO:               numpy: 1.21.6
2023-06-02 16:57:17,824:INFO:              pandas: 1.4.2
2023-06-02 16:57:17,824:INFO:              jinja2: 2.11.3
2023-06-02 16:57:17,824:INFO:               scipy: 1.7.3
2023-06-02 16:57:17,824:INFO:              joblib: 1.2.0
2023-06-02 16:57:17,824:INFO:             sklearn: 1.0.2
2023-06-02 16:57:17,824:INFO:                pyod: 1.0.9
2023-06-02 16:57:17,824:INFO:            imblearn: 0.10.1
2023-06-02 16:57:17,824:INFO:   category_encoders: 2.6.1
2023-06-02 16:57:17,825:INFO:            lightgbm: 3.3.5
2023-06-02 16:57:17,825:INFO:               numba: 0.55.1
2023-06-02 16:57:17,825:INFO:            requests: 2.27.1
2023-06-02 16:57:17,825:INFO:          matplotlib: 3.5.1
2023-06-02 16:57:17,825:INFO:          scikitplot: 0.3.7
2023-06-02 16:57:17,825:INFO:         yellowbrick: 1.5
2023-06-02 16:57:17,825:INFO:              plotly: 5.6.0
2023-06-02 16:57:17,825:INFO:             kaleido: 0.2.1
2023-06-02 16:57:17,825:INFO:         statsmodels: 0.13.2
2023-06-02 16:57:17,826:INFO:              sktime: 0.17.0
2023-06-02 16:57:17,826:INFO:               tbats: 1.1.3
2023-06-02 16:57:17,826:INFO:            pmdarima: 2.0.3
2023-06-02 16:57:17,826:INFO:              psutil: 5.9.5
2023-06-02 16:57:17,826:INFO:PyCaret optional dependencies:
2023-06-02 16:57:17,834:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 16:57:17,839:INFO:                shap: Not installed
2023-06-02 16:57:17,839:INFO:           interpret: Not installed
2023-06-02 16:57:17,839:INFO:                umap: Not installed
2023-06-02 16:57:17,839:INFO:    pandas_profiling: 4.2.0
2023-06-02 16:57:17,839:INFO:  explainerdashboard: Not installed
2023-06-02 16:57:17,839:INFO:             autoviz: Not installed
2023-06-02 16:57:17,839:INFO:           fairlearn: Not installed
2023-06-02 16:57:17,839:INFO:             xgboost: Not installed
2023-06-02 16:57:17,839:INFO:            catboost: Not installed
2023-06-02 16:57:17,839:INFO:              kmodes: Not installed
2023-06-02 16:57:17,839:INFO:             mlxtend: Not installed
2023-06-02 16:57:17,839:INFO:       statsforecast: Not installed
2023-06-02 16:57:17,839:INFO:        tune_sklearn: Not installed
2023-06-02 16:57:17,839:INFO:                 ray: Not installed
2023-06-02 16:57:17,839:INFO:            hyperopt: Not installed
2023-06-02 16:57:17,839:INFO:              optuna: Not installed
2023-06-02 16:57:17,839:INFO:               skopt: Not installed
2023-06-02 16:57:17,839:INFO:              mlflow: Not installed
2023-06-02 16:57:17,839:INFO:              gradio: Not installed
2023-06-02 16:57:17,839:INFO:             fastapi: Not installed
2023-06-02 16:57:17,839:INFO:             uvicorn: Not installed
2023-06-02 16:57:17,839:INFO:              m2cgen: Not installed
2023-06-02 16:57:17,839:INFO:           evidently: Not installed
2023-06-02 16:57:17,839:INFO:               fugue: Not installed
2023-06-02 16:57:17,839:INFO:           streamlit: 1.23.1
2023-06-02 16:57:17,839:INFO:             prophet: Not installed
2023-06-02 16:57:17,839:INFO:None
2023-06-02 16:57:17,839:INFO:Set up data.
2023-06-02 16:57:17,839:INFO:Set up train/test split.
2023-06-02 16:57:17,854:INFO:Set up index.
2023-06-02 16:57:17,854:INFO:Set up folding strategy.
2023-06-02 16:57:17,854:INFO:Assigning column types.
2023-06-02 16:57:17,854:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 16:57:17,854:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 16:57:17,854:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 16:57:17,854:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:17,957:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,004:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,004:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,053:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,060:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,065:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,121:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,168:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,169:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,169:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,169:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-06-02 16:57:18,172:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,172:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,219:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,266:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,266:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,266:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,282:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,282:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,344:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,386:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,386:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,386:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,386:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-06-02 16:57:18,402:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,448:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,496:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,496:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,496:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,514:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,582:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,635:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,635:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,635:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,635:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-06-02 16:57:18,714:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,754:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,754:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,848:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,925:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 16:57:18,929:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,929:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:18,929:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 16:57:19,001:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:19,064:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,064:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,149:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 16:57:19,185:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,185:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,185:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-06-02 16:57:19,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,401:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,401:INFO:Preparing preprocessing pipeline...
2023-06-02 16:57:19,401:INFO:Set up simple imputation.
2023-06-02 16:57:19,417:INFO:Finished creating preprocessing pipeline.
2023-06-02 16:57:19,433:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-06-02 16:57:19,433:INFO:Creating final display dataframe.
2023-06-02 16:57:19,486:INFO:Setup _display_container:                     Description             Value
0                    Session id              3146
1                        Target           Outcome
2                   Target type        Regression
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              1f9a
2023-06-02 16:57:19,601:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,601:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,720:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,720:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 16:57:19,720:INFO:setup() successfully completed in 1.94s...............
2023-06-02 16:57:19,729:INFO:Initializing compare_models()
2023-06-02 16:57:19,729:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-06-02 16:57:19,730:INFO:Checking exceptions
2023-06-02 16:57:19,732:INFO:Preparing display monitor
2023-06-02 16:57:19,736:INFO:Initializing Linear Regression
2023-06-02 16:57:19,736:INFO:Total runtime is 0.0 minutes
2023-06-02 16:57:19,736:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:19,736:INFO:Initializing create_model()
2023-06-02 16:57:19,736:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:19,736:INFO:Checking exceptions
2023-06-02 16:57:19,736:INFO:Importing libraries
2023-06-02 16:57:19,736:INFO:Copying training dataset
2023-06-02 16:57:19,740:INFO:Defining folds
2023-06-02 16:57:19,740:INFO:Declaring metric variables
2023-06-02 16:57:19,740:INFO:Importing untrained model
2023-06-02 16:57:19,740:INFO:Linear Regression Imported successfully
2023-06-02 16:57:19,740:INFO:Starting cross validation
2023-06-02 16:57:19,749:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:28,170:INFO:Calculating mean and std
2023-06-02 16:57:28,170:INFO:Creating metrics dataframe
2023-06-02 16:57:28,170:INFO:Uploading results into container
2023-06-02 16:57:28,170:INFO:Uploading model into container now
2023-06-02 16:57:28,170:INFO:_master_model_container: 1
2023-06-02 16:57:28,170:INFO:_display_container: 2
2023-06-02 16:57:28,170:INFO:LinearRegression(n_jobs=-1)
2023-06-02 16:57:28,170:INFO:create_model() successfully completed......................................
2023-06-02 16:57:28,328:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:28,329:INFO:Creating metrics dataframe
2023-06-02 16:57:28,337:INFO:Initializing Lasso Regression
2023-06-02 16:57:28,337:INFO:Total runtime is 0.14335112969080607 minutes
2023-06-02 16:57:28,337:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:28,337:INFO:Initializing create_model()
2023-06-02 16:57:28,337:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:28,337:INFO:Checking exceptions
2023-06-02 16:57:28,339:INFO:Importing libraries
2023-06-02 16:57:28,339:INFO:Copying training dataset
2023-06-02 16:57:28,348:INFO:Defining folds
2023-06-02 16:57:28,348:INFO:Declaring metric variables
2023-06-02 16:57:28,348:INFO:Importing untrained model
2023-06-02 16:57:28,349:INFO:Lasso Regression Imported successfully
2023-06-02 16:57:28,350:INFO:Starting cross validation
2023-06-02 16:57:28,351:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:28,702:INFO:Calculating mean and std
2023-06-02 16:57:28,702:INFO:Creating metrics dataframe
2023-06-02 16:57:28,712:INFO:Uploading results into container
2023-06-02 16:57:28,712:INFO:Uploading model into container now
2023-06-02 16:57:28,712:INFO:_master_model_container: 2
2023-06-02 16:57:28,712:INFO:_display_container: 2
2023-06-02 16:57:28,712:INFO:Lasso(random_state=3146)
2023-06-02 16:57:28,712:INFO:create_model() successfully completed......................................
2023-06-02 16:57:28,882:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:28,882:INFO:Creating metrics dataframe
2023-06-02 16:57:28,898:INFO:Initializing Ridge Regression
2023-06-02 16:57:28,898:INFO:Total runtime is 0.15270141363143921 minutes
2023-06-02 16:57:28,898:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:28,898:INFO:Initializing create_model()
2023-06-02 16:57:28,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:28,898:INFO:Checking exceptions
2023-06-02 16:57:28,898:INFO:Importing libraries
2023-06-02 16:57:28,898:INFO:Copying training dataset
2023-06-02 16:57:28,898:INFO:Defining folds
2023-06-02 16:57:28,898:INFO:Declaring metric variables
2023-06-02 16:57:28,898:INFO:Importing untrained model
2023-06-02 16:57:28,898:INFO:Ridge Regression Imported successfully
2023-06-02 16:57:28,898:INFO:Starting cross validation
2023-06-02 16:57:28,913:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:29,214:INFO:Calculating mean and std
2023-06-02 16:57:29,228:INFO:Creating metrics dataframe
2023-06-02 16:57:29,244:INFO:Uploading results into container
2023-06-02 16:57:29,249:INFO:Uploading model into container now
2023-06-02 16:57:29,249:INFO:_master_model_container: 3
2023-06-02 16:57:29,251:INFO:_display_container: 2
2023-06-02 16:57:29,251:INFO:Ridge(random_state=3146)
2023-06-02 16:57:29,251:INFO:create_model() successfully completed......................................
2023-06-02 16:57:29,467:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:29,467:INFO:Creating metrics dataframe
2023-06-02 16:57:29,482:INFO:Initializing Elastic Net
2023-06-02 16:57:29,482:INFO:Total runtime is 0.16244757175445557 minutes
2023-06-02 16:57:29,482:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:29,482:INFO:Initializing create_model()
2023-06-02 16:57:29,482:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:29,482:INFO:Checking exceptions
2023-06-02 16:57:29,482:INFO:Importing libraries
2023-06-02 16:57:29,482:INFO:Copying training dataset
2023-06-02 16:57:29,491:INFO:Defining folds
2023-06-02 16:57:29,491:INFO:Declaring metric variables
2023-06-02 16:57:29,491:INFO:Importing untrained model
2023-06-02 16:57:29,491:INFO:Elastic Net Imported successfully
2023-06-02 16:57:29,491:INFO:Starting cross validation
2023-06-02 16:57:29,491:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:29,760:INFO:Calculating mean and std
2023-06-02 16:57:29,760:INFO:Creating metrics dataframe
2023-06-02 16:57:29,770:INFO:Uploading results into container
2023-06-02 16:57:29,770:INFO:Uploading model into container now
2023-06-02 16:57:29,770:INFO:_master_model_container: 4
2023-06-02 16:57:29,770:INFO:_display_container: 2
2023-06-02 16:57:29,770:INFO:ElasticNet(random_state=3146)
2023-06-02 16:57:29,770:INFO:create_model() successfully completed......................................
2023-06-02 16:57:29,947:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:29,947:INFO:Creating metrics dataframe
2023-06-02 16:57:29,953:INFO:Initializing Least Angle Regression
2023-06-02 16:57:29,953:INFO:Total runtime is 0.17029863198598225 minutes
2023-06-02 16:57:29,953:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:29,953:INFO:Initializing create_model()
2023-06-02 16:57:29,953:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:29,953:INFO:Checking exceptions
2023-06-02 16:57:29,953:INFO:Importing libraries
2023-06-02 16:57:29,953:INFO:Copying training dataset
2023-06-02 16:57:29,953:INFO:Defining folds
2023-06-02 16:57:29,953:INFO:Declaring metric variables
2023-06-02 16:57:29,953:INFO:Importing untrained model
2023-06-02 16:57:29,953:INFO:Least Angle Regression Imported successfully
2023-06-02 16:57:29,953:INFO:Starting cross validation
2023-06-02 16:57:29,953:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:30,022:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,033:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,033:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,064:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,136:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,162:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,227:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,237:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:30,264:INFO:Calculating mean and std
2023-06-02 16:57:30,264:INFO:Creating metrics dataframe
2023-06-02 16:57:30,264:INFO:Uploading results into container
2023-06-02 16:57:30,264:INFO:Uploading model into container now
2023-06-02 16:57:30,264:INFO:_master_model_container: 5
2023-06-02 16:57:30,264:INFO:_display_container: 2
2023-06-02 16:57:30,264:INFO:Lars(random_state=3146)
2023-06-02 16:57:30,264:INFO:create_model() successfully completed......................................
2023-06-02 16:57:30,450:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:30,450:INFO:Creating metrics dataframe
2023-06-02 16:57:30,454:INFO:Initializing Lasso Least Angle Regression
2023-06-02 16:57:30,454:INFO:Total runtime is 0.17864201466242471 minutes
2023-06-02 16:57:30,454:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:30,454:INFO:Initializing create_model()
2023-06-02 16:57:30,454:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:30,454:INFO:Checking exceptions
2023-06-02 16:57:30,454:INFO:Importing libraries
2023-06-02 16:57:30,454:INFO:Copying training dataset
2023-06-02 16:57:30,454:INFO:Defining folds
2023-06-02 16:57:30,454:INFO:Declaring metric variables
2023-06-02 16:57:30,454:INFO:Importing untrained model
2023-06-02 16:57:30,454:INFO:Lasso Least Angle Regression Imported successfully
2023-06-02 16:57:30,454:INFO:Starting cross validation
2023-06-02 16:57:30,454:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:30,530:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,542:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,563:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,563:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,752:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,804:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,824:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,829:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,882:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,904:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 16:57:30,927:INFO:Calculating mean and std
2023-06-02 16:57:30,928:INFO:Creating metrics dataframe
2023-06-02 16:57:30,933:INFO:Uploading results into container
2023-06-02 16:57:30,934:INFO:Uploading model into container now
2023-06-02 16:57:30,934:INFO:_master_model_container: 6
2023-06-02 16:57:30,934:INFO:_display_container: 2
2023-06-02 16:57:30,935:INFO:LassoLars(random_state=3146)
2023-06-02 16:57:30,935:INFO:create_model() successfully completed......................................
2023-06-02 16:57:31,135:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:31,135:INFO:Creating metrics dataframe
2023-06-02 16:57:31,140:INFO:Initializing Orthogonal Matching Pursuit
2023-06-02 16:57:31,140:INFO:Total runtime is 0.19006674687067668 minutes
2023-06-02 16:57:31,140:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:31,140:INFO:Initializing create_model()
2023-06-02 16:57:31,140:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:31,140:INFO:Checking exceptions
2023-06-02 16:57:31,140:INFO:Importing libraries
2023-06-02 16:57:31,140:INFO:Copying training dataset
2023-06-02 16:57:31,140:INFO:Defining folds
2023-06-02 16:57:31,140:INFO:Declaring metric variables
2023-06-02 16:57:31,140:INFO:Importing untrained model
2023-06-02 16:57:31,140:INFO:Orthogonal Matching Pursuit Imported successfully
2023-06-02 16:57:31,140:INFO:Starting cross validation
2023-06-02 16:57:31,140:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:31,217:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,256:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,264:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,264:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,339:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,340:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,351:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,370:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,420:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 16:57:31,441:INFO:Calculating mean and std
2023-06-02 16:57:31,451:INFO:Creating metrics dataframe
2023-06-02 16:57:31,451:INFO:Uploading results into container
2023-06-02 16:57:31,451:INFO:Uploading model into container now
2023-06-02 16:57:31,451:INFO:_master_model_container: 7
2023-06-02 16:57:31,451:INFO:_display_container: 2
2023-06-02 16:57:31,451:INFO:OrthogonalMatchingPursuit()
2023-06-02 16:57:31,451:INFO:create_model() successfully completed......................................
2023-06-02 16:57:31,626:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:31,626:INFO:Creating metrics dataframe
2023-06-02 16:57:31,626:INFO:Initializing Bayesian Ridge
2023-06-02 16:57:31,626:INFO:Total runtime is 0.1981681227684021 minutes
2023-06-02 16:57:31,626:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:31,626:INFO:Initializing create_model()
2023-06-02 16:57:31,634:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:31,634:INFO:Checking exceptions
2023-06-02 16:57:31,634:INFO:Importing libraries
2023-06-02 16:57:31,634:INFO:Copying training dataset
2023-06-02 16:57:31,635:INFO:Defining folds
2023-06-02 16:57:31,635:INFO:Declaring metric variables
2023-06-02 16:57:31,635:INFO:Importing untrained model
2023-06-02 16:57:31,635:INFO:Bayesian Ridge Imported successfully
2023-06-02 16:57:31,635:INFO:Starting cross validation
2023-06-02 16:57:31,635:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:31,902:INFO:Calculating mean and std
2023-06-02 16:57:31,903:INFO:Creating metrics dataframe
2023-06-02 16:57:31,905:INFO:Uploading results into container
2023-06-02 16:57:31,905:INFO:Uploading model into container now
2023-06-02 16:57:31,905:INFO:_master_model_container: 8
2023-06-02 16:57:31,905:INFO:_display_container: 2
2023-06-02 16:57:31,905:INFO:BayesianRidge()
2023-06-02 16:57:31,905:INFO:create_model() successfully completed......................................
2023-06-02 16:57:32,034:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:32,034:INFO:Creating metrics dataframe
2023-06-02 16:57:32,034:INFO:Initializing Passive Aggressive Regressor
2023-06-02 16:57:32,034:INFO:Total runtime is 0.20496704578399658 minutes
2023-06-02 16:57:32,034:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:32,034:INFO:Initializing create_model()
2023-06-02 16:57:32,034:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:32,034:INFO:Checking exceptions
2023-06-02 16:57:32,034:INFO:Importing libraries
2023-06-02 16:57:32,034:INFO:Copying training dataset
2023-06-02 16:57:32,034:INFO:Defining folds
2023-06-02 16:57:32,034:INFO:Declaring metric variables
2023-06-02 16:57:32,034:INFO:Importing untrained model
2023-06-02 16:57:32,034:INFO:Passive Aggressive Regressor Imported successfully
2023-06-02 16:57:32,034:INFO:Starting cross validation
2023-06-02 16:57:32,034:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:32,312:INFO:Calculating mean and std
2023-06-02 16:57:32,321:INFO:Creating metrics dataframe
2023-06-02 16:57:32,328:INFO:Uploading results into container
2023-06-02 16:57:32,329:INFO:Uploading model into container now
2023-06-02 16:57:32,330:INFO:_master_model_container: 9
2023-06-02 16:57:32,330:INFO:_display_container: 2
2023-06-02 16:57:32,330:INFO:PassiveAggressiveRegressor(random_state=3146)
2023-06-02 16:57:32,330:INFO:create_model() successfully completed......................................
2023-06-02 16:57:32,527:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:32,528:INFO:Creating metrics dataframe
2023-06-02 16:57:32,537:INFO:Initializing Huber Regressor
2023-06-02 16:57:32,538:INFO:Total runtime is 0.21336691776911418 minutes
2023-06-02 16:57:32,538:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:32,539:INFO:Initializing create_model()
2023-06-02 16:57:32,539:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:32,539:INFO:Checking exceptions
2023-06-02 16:57:32,539:INFO:Importing libraries
2023-06-02 16:57:32,539:INFO:Copying training dataset
2023-06-02 16:57:32,546:INFO:Defining folds
2023-06-02 16:57:32,546:INFO:Declaring metric variables
2023-06-02 16:57:32,546:INFO:Importing untrained model
2023-06-02 16:57:32,546:INFO:Huber Regressor Imported successfully
2023-06-02 16:57:32,546:INFO:Starting cross validation
2023-06-02 16:57:32,546:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:32,702:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,727:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,734:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,748:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,849:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,874:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,890:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,992:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:32,995:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:33,020:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 16:57:33,042:INFO:Calculating mean and std
2023-06-02 16:57:33,042:INFO:Creating metrics dataframe
2023-06-02 16:57:33,042:INFO:Uploading results into container
2023-06-02 16:57:33,051:INFO:Uploading model into container now
2023-06-02 16:57:33,051:INFO:_master_model_container: 10
2023-06-02 16:57:33,051:INFO:_display_container: 2
2023-06-02 16:57:33,051:INFO:HuberRegressor()
2023-06-02 16:57:33,051:INFO:create_model() successfully completed......................................
2023-06-02 16:57:33,233:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:33,233:INFO:Creating metrics dataframe
2023-06-02 16:57:33,233:INFO:Initializing K Neighbors Regressor
2023-06-02 16:57:33,233:INFO:Total runtime is 0.22495349248250326 minutes
2023-06-02 16:57:33,233:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:33,233:INFO:Initializing create_model()
2023-06-02 16:57:33,233:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:33,233:INFO:Checking exceptions
2023-06-02 16:57:33,233:INFO:Importing libraries
2023-06-02 16:57:33,233:INFO:Copying training dataset
2023-06-02 16:57:33,248:INFO:Defining folds
2023-06-02 16:57:33,248:INFO:Declaring metric variables
2023-06-02 16:57:33,248:INFO:Importing untrained model
2023-06-02 16:57:33,248:INFO:K Neighbors Regressor Imported successfully
2023-06-02 16:57:33,248:INFO:Starting cross validation
2023-06-02 16:57:33,248:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:33,665:INFO:Calculating mean and std
2023-06-02 16:57:33,665:INFO:Creating metrics dataframe
2023-06-02 16:57:33,665:INFO:Uploading results into container
2023-06-02 16:57:33,665:INFO:Uploading model into container now
2023-06-02 16:57:33,665:INFO:_master_model_container: 11
2023-06-02 16:57:33,665:INFO:_display_container: 2
2023-06-02 16:57:33,665:INFO:KNeighborsRegressor(n_jobs=-1)
2023-06-02 16:57:33,665:INFO:create_model() successfully completed......................................
2023-06-02 16:57:33,848:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:33,848:INFO:Creating metrics dataframe
2023-06-02 16:57:33,848:INFO:Initializing Decision Tree Regressor
2023-06-02 16:57:33,848:INFO:Total runtime is 0.23521155913670858 minutes
2023-06-02 16:57:33,848:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:33,848:INFO:Initializing create_model()
2023-06-02 16:57:33,848:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:33,848:INFO:Checking exceptions
2023-06-02 16:57:33,848:INFO:Importing libraries
2023-06-02 16:57:33,848:INFO:Copying training dataset
2023-06-02 16:57:33,866:INFO:Defining folds
2023-06-02 16:57:33,866:INFO:Declaring metric variables
2023-06-02 16:57:33,866:INFO:Importing untrained model
2023-06-02 16:57:33,866:INFO:Decision Tree Regressor Imported successfully
2023-06-02 16:57:33,866:INFO:Starting cross validation
2023-06-02 16:57:33,866:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:34,219:INFO:Calculating mean and std
2023-06-02 16:57:34,219:INFO:Creating metrics dataframe
2023-06-02 16:57:34,227:INFO:Uploading results into container
2023-06-02 16:57:34,227:INFO:Uploading model into container now
2023-06-02 16:57:34,227:INFO:_master_model_container: 12
2023-06-02 16:57:34,227:INFO:_display_container: 2
2023-06-02 16:57:34,227:INFO:DecisionTreeRegressor(random_state=3146)
2023-06-02 16:57:34,227:INFO:create_model() successfully completed......................................
2023-06-02 16:57:34,401:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:34,401:INFO:Creating metrics dataframe
2023-06-02 16:57:34,401:INFO:Initializing Random Forest Regressor
2023-06-02 16:57:34,401:INFO:Total runtime is 0.24442174037297568 minutes
2023-06-02 16:57:34,401:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:34,401:INFO:Initializing create_model()
2023-06-02 16:57:34,401:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:34,401:INFO:Checking exceptions
2023-06-02 16:57:34,401:INFO:Importing libraries
2023-06-02 16:57:34,401:INFO:Copying training dataset
2023-06-02 16:57:34,421:INFO:Defining folds
2023-06-02 16:57:34,421:INFO:Declaring metric variables
2023-06-02 16:57:34,421:INFO:Importing untrained model
2023-06-02 16:57:34,421:INFO:Random Forest Regressor Imported successfully
2023-06-02 16:57:34,421:INFO:Starting cross validation
2023-06-02 16:57:34,421:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:36,401:INFO:Calculating mean and std
2023-06-02 16:57:36,401:INFO:Creating metrics dataframe
2023-06-02 16:57:36,417:INFO:Uploading results into container
2023-06-02 16:57:36,417:INFO:Uploading model into container now
2023-06-02 16:57:36,417:INFO:_master_model_container: 13
2023-06-02 16:57:36,417:INFO:_display_container: 2
2023-06-02 16:57:36,417:INFO:RandomForestRegressor(n_jobs=-1, random_state=3146)
2023-06-02 16:57:36,417:INFO:create_model() successfully completed......................................
2023-06-02 16:57:36,534:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:36,535:INFO:Creating metrics dataframe
2023-06-02 16:57:36,541:INFO:Initializing Extra Trees Regressor
2023-06-02 16:57:36,542:INFO:Total runtime is 0.2800900181134542 minutes
2023-06-02 16:57:36,542:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:36,542:INFO:Initializing create_model()
2023-06-02 16:57:36,542:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:36,542:INFO:Checking exceptions
2023-06-02 16:57:36,542:INFO:Importing libraries
2023-06-02 16:57:36,542:INFO:Copying training dataset
2023-06-02 16:57:36,546:INFO:Defining folds
2023-06-02 16:57:36,546:INFO:Declaring metric variables
2023-06-02 16:57:36,546:INFO:Importing untrained model
2023-06-02 16:57:36,546:INFO:Extra Trees Regressor Imported successfully
2023-06-02 16:57:36,547:INFO:Starting cross validation
2023-06-02 16:57:36,547:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:38,104:INFO:Calculating mean and std
2023-06-02 16:57:38,104:INFO:Creating metrics dataframe
2023-06-02 16:57:38,134:INFO:Uploading results into container
2023-06-02 16:57:38,135:INFO:Uploading model into container now
2023-06-02 16:57:38,136:INFO:_master_model_container: 14
2023-06-02 16:57:38,137:INFO:_display_container: 2
2023-06-02 16:57:38,137:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3146)
2023-06-02 16:57:38,137:INFO:create_model() successfully completed......................................
2023-06-02 16:57:38,252:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:38,252:INFO:Creating metrics dataframe
2023-06-02 16:57:38,257:INFO:Initializing AdaBoost Regressor
2023-06-02 16:57:38,257:INFO:Total runtime is 0.30869150161743164 minutes
2023-06-02 16:57:38,257:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:38,258:INFO:Initializing create_model()
2023-06-02 16:57:38,258:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:38,258:INFO:Checking exceptions
2023-06-02 16:57:38,258:INFO:Importing libraries
2023-06-02 16:57:38,258:INFO:Copying training dataset
2023-06-02 16:57:38,261:INFO:Defining folds
2023-06-02 16:57:38,261:INFO:Declaring metric variables
2023-06-02 16:57:38,261:INFO:Importing untrained model
2023-06-02 16:57:38,261:INFO:AdaBoost Regressor Imported successfully
2023-06-02 16:57:38,262:INFO:Starting cross validation
2023-06-02 16:57:38,262:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:38,892:INFO:Calculating mean and std
2023-06-02 16:57:38,893:INFO:Creating metrics dataframe
2023-06-02 16:57:38,910:INFO:Uploading results into container
2023-06-02 16:57:38,911:INFO:Uploading model into container now
2023-06-02 16:57:38,912:INFO:_master_model_container: 15
2023-06-02 16:57:38,912:INFO:_display_container: 2
2023-06-02 16:57:38,912:INFO:AdaBoostRegressor(random_state=3146)
2023-06-02 16:57:38,912:INFO:create_model() successfully completed......................................
2023-06-02 16:57:39,020:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:39,020:INFO:Creating metrics dataframe
2023-06-02 16:57:39,020:INFO:Initializing Gradient Boosting Regressor
2023-06-02 16:57:39,020:INFO:Total runtime is 0.32141093015670774 minutes
2023-06-02 16:57:39,020:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:39,020:INFO:Initializing create_model()
2023-06-02 16:57:39,020:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:39,020:INFO:Checking exceptions
2023-06-02 16:57:39,020:INFO:Importing libraries
2023-06-02 16:57:39,020:INFO:Copying training dataset
2023-06-02 16:57:39,020:INFO:Defining folds
2023-06-02 16:57:39,020:INFO:Declaring metric variables
2023-06-02 16:57:39,020:INFO:Importing untrained model
2023-06-02 16:57:39,020:INFO:Gradient Boosting Regressor Imported successfully
2023-06-02 16:57:39,020:INFO:Starting cross validation
2023-06-02 16:57:39,020:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:40,033:INFO:Calculating mean and std
2023-06-02 16:57:40,033:INFO:Creating metrics dataframe
2023-06-02 16:57:40,048:INFO:Uploading results into container
2023-06-02 16:57:40,048:INFO:Uploading model into container now
2023-06-02 16:57:40,048:INFO:_master_model_container: 16
2023-06-02 16:57:40,048:INFO:_display_container: 2
2023-06-02 16:57:40,048:INFO:GradientBoostingRegressor(random_state=3146)
2023-06-02 16:57:40,048:INFO:create_model() successfully completed......................................
2023-06-02 16:57:40,166:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:40,166:INFO:Creating metrics dataframe
2023-06-02 16:57:40,171:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 16:57:40,171:INFO:Total runtime is 0.34059256315231323 minutes
2023-06-02 16:57:40,171:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:40,171:INFO:Initializing create_model()
2023-06-02 16:57:40,171:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:40,171:INFO:Checking exceptions
2023-06-02 16:57:40,172:INFO:Importing libraries
2023-06-02 16:57:40,172:INFO:Copying training dataset
2023-06-02 16:57:40,176:INFO:Defining folds
2023-06-02 16:57:40,176:INFO:Declaring metric variables
2023-06-02 16:57:40,176:INFO:Importing untrained model
2023-06-02 16:57:40,177:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 16:57:40,177:INFO:Starting cross validation
2023-06-02 16:57:40,178:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:42,134:INFO:Calculating mean and std
2023-06-02 16:57:42,135:INFO:Creating metrics dataframe
2023-06-02 16:57:42,164:INFO:Uploading results into container
2023-06-02 16:57:42,165:INFO:Uploading model into container now
2023-06-02 16:57:42,165:INFO:_master_model_container: 17
2023-06-02 16:57:42,165:INFO:_display_container: 2
2023-06-02 16:57:42,166:INFO:LGBMRegressor(random_state=3146)
2023-06-02 16:57:42,166:INFO:create_model() successfully completed......................................
2023-06-02 16:57:42,346:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:42,346:INFO:Creating metrics dataframe
2023-06-02 16:57:42,351:INFO:Initializing Dummy Regressor
2023-06-02 16:57:42,351:INFO:Total runtime is 0.37692718108495077 minutes
2023-06-02 16:57:42,352:INFO:SubProcess create_model() called ==================================
2023-06-02 16:57:42,352:INFO:Initializing create_model()
2023-06-02 16:57:42,352:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FE6CFB80>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:42,352:INFO:Checking exceptions
2023-06-02 16:57:42,352:INFO:Importing libraries
2023-06-02 16:57:42,352:INFO:Copying training dataset
2023-06-02 16:57:42,357:INFO:Defining folds
2023-06-02 16:57:42,357:INFO:Declaring metric variables
2023-06-02 16:57:42,357:INFO:Importing untrained model
2023-06-02 16:57:42,357:INFO:Dummy Regressor Imported successfully
2023-06-02 16:57:42,358:INFO:Starting cross validation
2023-06-02 16:57:42,358:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 16:57:42,699:INFO:Calculating mean and std
2023-06-02 16:57:42,700:INFO:Creating metrics dataframe
2023-06-02 16:57:42,723:INFO:Uploading results into container
2023-06-02 16:57:42,724:INFO:Uploading model into container now
2023-06-02 16:57:42,724:INFO:_master_model_container: 18
2023-06-02 16:57:42,724:INFO:_display_container: 2
2023-06-02 16:57:42,724:INFO:DummyRegressor()
2023-06-02 16:57:42,724:INFO:create_model() successfully completed......................................
2023-06-02 16:57:42,834:INFO:SubProcess create_model() end ==================================
2023-06-02 16:57:42,834:INFO:Creating metrics dataframe
2023-06-02 16:57:42,840:INFO:Initializing create_model()
2023-06-02 16:57:42,840:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4F6504B80>, estimator=Ridge(random_state=3146), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 16:57:42,840:INFO:Checking exceptions
2023-06-02 16:57:42,841:INFO:Importing libraries
2023-06-02 16:57:42,841:INFO:Copying training dataset
2023-06-02 16:57:42,843:INFO:Defining folds
2023-06-02 16:57:42,843:INFO:Declaring metric variables
2023-06-02 16:57:42,844:INFO:Importing untrained model
2023-06-02 16:57:42,844:INFO:Declaring custom model
2023-06-02 16:57:42,844:INFO:Ridge Regression Imported successfully
2023-06-02 16:57:42,845:INFO:Cross validation set to False
2023-06-02 16:57:42,845:INFO:Fitting Model
2023-06-02 16:57:42,877:INFO:Ridge(random_state=3146)
2023-06-02 16:57:42,877:INFO:create_model() successfully completed......................................
2023-06-02 16:57:43,009:INFO:_master_model_container: 18
2023-06-02 16:57:43,009:INFO:_display_container: 2
2023-06-02 16:57:43,010:INFO:Ridge(random_state=3146)
2023-06-02 16:57:43,010:INFO:compare_models() successfully completed......................................
2023-06-02 16:57:43,016:INFO:Initializing save_model()
2023-06-02 16:57:43,016:INFO:save_model(model=Ridge(random_state=3146), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2023-06-02 16:57:43,016:INFO:Adding model into prep_pipe
2023-06-02 16:57:43,020:INFO:best_model.pkl saved in current working directory
2023-06-02 16:57:43,024:INFO:Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('trained_model', Ridge(random_state=3146))])
2023-06-02 16:57:43,024:INFO:save_model() successfully completed......................................
2023-06-02 16:59:30,063:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:59:30,063:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:59:30,063:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:59:30,063:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 16:59:30,803:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 16:59:32,242:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 17:01:01,252:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:01:01,252:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:01:01,252:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:01:01,252:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:01:02,059:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 17:01:03,713:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 17:01:10,923:INFO:PyCaret RegressionExperiment
2023-06-02 17:01:10,924:INFO:Logging name: reg-default-name
2023-06-02 17:01:10,924:INFO:ML Usecase: MLUsecase.REGRESSION
2023-06-02 17:01:10,924:INFO:version 3.0.2
2023-06-02 17:01:10,924:INFO:Initializing setup()
2023-06-02 17:01:10,924:INFO:self.USI: 5309
2023-06-02 17:01:10,924:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'X', 'html_param', 'X_test', 'log_plots_param', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id', 'transform_target_param'}
2023-06-02 17:01:10,924:INFO:Checking environment
2023-06-02 17:01:10,924:INFO:python_version: 3.9.12
2023-06-02 17:01:10,924:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 17:01:10,924:INFO:machine: AMD64
2023-06-02 17:01:10,924:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 17:01:10,928:INFO:Memory: svmem(total=8345964544, available=1072906240, percent=87.1, used=7273058304, free=1072906240)
2023-06-02 17:01:10,928:INFO:Physical Core: 2
2023-06-02 17:01:10,928:INFO:Logical Core: 4
2023-06-02 17:01:10,928:INFO:Checking libraries
2023-06-02 17:01:10,928:INFO:System:
2023-06-02 17:01:10,928:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 17:01:10,928:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 17:01:10,928:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 17:01:10,928:INFO:PyCaret required dependencies:
2023-06-02 17:01:10,928:INFO:                 pip: 21.2.4
2023-06-02 17:01:10,928:INFO:          setuptools: 61.2.0
2023-06-02 17:01:10,928:INFO:             pycaret: 3.0.2
2023-06-02 17:01:10,928:INFO:             IPython: 8.2.0
2023-06-02 17:01:10,928:INFO:          ipywidgets: 7.6.5
2023-06-02 17:01:10,928:INFO:                tqdm: 4.64.0
2023-06-02 17:01:10,928:INFO:               numpy: 1.21.6
2023-06-02 17:01:10,928:INFO:              pandas: 1.4.2
2023-06-02 17:01:10,928:INFO:              jinja2: 2.11.3
2023-06-02 17:01:10,929:INFO:               scipy: 1.7.3
2023-06-02 17:01:10,929:INFO:              joblib: 1.2.0
2023-06-02 17:01:10,929:INFO:             sklearn: 1.0.2
2023-06-02 17:01:10,929:INFO:                pyod: 1.0.9
2023-06-02 17:01:10,929:INFO:            imblearn: 0.10.1
2023-06-02 17:01:10,929:INFO:   category_encoders: 2.6.1
2023-06-02 17:01:10,929:INFO:            lightgbm: 3.3.5
2023-06-02 17:01:10,929:INFO:               numba: 0.55.1
2023-06-02 17:01:10,929:INFO:            requests: 2.27.1
2023-06-02 17:01:10,929:INFO:          matplotlib: 3.5.1
2023-06-02 17:01:10,929:INFO:          scikitplot: 0.3.7
2023-06-02 17:01:10,929:INFO:         yellowbrick: 1.5
2023-06-02 17:01:10,929:INFO:              plotly: 5.6.0
2023-06-02 17:01:10,929:INFO:             kaleido: 0.2.1
2023-06-02 17:01:10,929:INFO:         statsmodels: 0.13.2
2023-06-02 17:01:10,929:INFO:              sktime: 0.17.0
2023-06-02 17:01:10,929:INFO:               tbats: 1.1.3
2023-06-02 17:01:10,929:INFO:            pmdarima: 2.0.3
2023-06-02 17:01:10,929:INFO:              psutil: 5.9.5
2023-06-02 17:01:10,929:INFO:PyCaret optional dependencies:
2023-06-02 17:01:10,929:INFO:                shap: Not installed
2023-06-02 17:01:10,929:INFO:           interpret: Not installed
2023-06-02 17:01:10,929:INFO:                umap: Not installed
2023-06-02 17:01:10,929:INFO:    pandas_profiling: 4.2.0
2023-06-02 17:01:10,929:INFO:  explainerdashboard: Not installed
2023-06-02 17:01:10,929:INFO:             autoviz: Not installed
2023-06-02 17:01:10,929:INFO:           fairlearn: Not installed
2023-06-02 17:01:10,929:INFO:             xgboost: Not installed
2023-06-02 17:01:10,929:INFO:            catboost: Not installed
2023-06-02 17:01:10,930:INFO:              kmodes: Not installed
2023-06-02 17:01:10,930:INFO:             mlxtend: Not installed
2023-06-02 17:01:10,930:INFO:       statsforecast: Not installed
2023-06-02 17:01:10,930:INFO:        tune_sklearn: Not installed
2023-06-02 17:01:10,930:INFO:                 ray: Not installed
2023-06-02 17:01:10,930:INFO:            hyperopt: Not installed
2023-06-02 17:01:10,930:INFO:              optuna: Not installed
2023-06-02 17:01:10,930:INFO:               skopt: Not installed
2023-06-02 17:01:10,930:INFO:              mlflow: Not installed
2023-06-02 17:01:10,930:INFO:              gradio: Not installed
2023-06-02 17:01:10,930:INFO:             fastapi: Not installed
2023-06-02 17:01:10,930:INFO:             uvicorn: Not installed
2023-06-02 17:01:10,930:INFO:              m2cgen: Not installed
2023-06-02 17:01:10,930:INFO:           evidently: Not installed
2023-06-02 17:01:10,930:INFO:               fugue: Not installed
2023-06-02 17:01:10,930:INFO:           streamlit: 1.23.1
2023-06-02 17:01:10,930:INFO:             prophet: Not installed
2023-06-02 17:01:10,930:INFO:None
2023-06-02 17:01:10,930:INFO:Set up data.
2023-06-02 17:01:10,934:INFO:Set up train/test split.
2023-06-02 17:01:10,937:INFO:Set up index.
2023-06-02 17:01:10,937:INFO:Set up folding strategy.
2023-06-02 17:01:10,938:INFO:Assigning column types.
2023-06-02 17:01:10,944:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 17:01:10,944:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:01:10,948:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:10,953:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,014:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,084:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,085:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,085:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,085:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,092:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,097:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,166:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,219:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,219:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,219:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,220:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-06-02 17:01:11,225:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,229:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,297:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,347:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,347:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,352:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,357:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,419:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,470:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,471:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,471:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,472:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-06-02 17:01:11,482:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,545:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,603:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,604:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,613:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,674:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,724:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,725:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,725:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,726:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-06-02 17:01:11,795:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,839:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,839:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,840:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,917:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,962:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:11,963:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,963:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:11,963:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 17:01:12,034:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:12,099:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,099:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,185:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:12,236:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,238:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,238:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-06-02 17:01:12,358:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,358:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,475:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,476:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,477:INFO:Preparing preprocessing pipeline...
2023-06-02 17:01:12,477:INFO:Set up simple imputation.
2023-06-02 17:01:12,494:INFO:Finished creating preprocessing pipeline.
2023-06-02 17:01:12,497:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-06-02 17:01:12,498:INFO:Creating final display dataframe.
2023-06-02 17:01:12,562:INFO:Setup _display_container:                     Description             Value
0                    Session id              3556
1                        Target           Outcome
2                   Target type        Regression
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              5309
2023-06-02 17:01:12,694:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,695:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,823:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,824:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:12,825:INFO:setup() successfully completed in 1.93s...............
2023-06-02 17:01:12,829:INFO:Initializing compare_models()
2023-06-02 17:01:12,829:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-06-02 17:01:12,829:INFO:Checking exceptions
2023-06-02 17:01:12,831:INFO:Preparing display monitor
2023-06-02 17:01:12,834:INFO:Initializing Linear Regression
2023-06-02 17:01:12,835:INFO:Total runtime is 1.7062822977701822e-05 minutes
2023-06-02 17:01:12,835:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:12,835:INFO:Initializing create_model()
2023-06-02 17:01:12,835:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:12,835:INFO:Checking exceptions
2023-06-02 17:01:12,835:INFO:Importing libraries
2023-06-02 17:01:12,835:INFO:Copying training dataset
2023-06-02 17:01:12,839:INFO:Defining folds
2023-06-02 17:01:12,839:INFO:Declaring metric variables
2023-06-02 17:01:12,839:INFO:Importing untrained model
2023-06-02 17:01:12,839:INFO:Linear Regression Imported successfully
2023-06-02 17:01:12,839:INFO:Starting cross validation
2023-06-02 17:01:12,840:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:13,234:INFO:Calculating mean and std
2023-06-02 17:01:13,236:INFO:Creating metrics dataframe
2023-06-02 17:01:13,261:INFO:Uploading results into container
2023-06-02 17:01:13,261:INFO:Uploading model into container now
2023-06-02 17:01:13,262:INFO:_master_model_container: 1
2023-06-02 17:01:13,262:INFO:_display_container: 2
2023-06-02 17:01:13,262:INFO:LinearRegression(n_jobs=-1)
2023-06-02 17:01:13,262:INFO:create_model() successfully completed......................................
2023-06-02 17:01:13,401:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:13,401:INFO:Creating metrics dataframe
2023-06-02 17:01:13,407:INFO:Initializing Lasso Regression
2023-06-02 17:01:13,407:INFO:Total runtime is 0.009544750054677328 minutes
2023-06-02 17:01:13,407:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:13,408:INFO:Initializing create_model()
2023-06-02 17:01:13,408:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:13,408:INFO:Checking exceptions
2023-06-02 17:01:13,408:INFO:Importing libraries
2023-06-02 17:01:13,408:INFO:Copying training dataset
2023-06-02 17:01:13,412:INFO:Defining folds
2023-06-02 17:01:13,412:INFO:Declaring metric variables
2023-06-02 17:01:13,412:INFO:Importing untrained model
2023-06-02 17:01:13,413:INFO:Lasso Regression Imported successfully
2023-06-02 17:01:13,413:INFO:Starting cross validation
2023-06-02 17:01:13,413:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:13,737:INFO:Calculating mean and std
2023-06-02 17:01:13,738:INFO:Creating metrics dataframe
2023-06-02 17:01:13,767:INFO:Uploading results into container
2023-06-02 17:01:13,768:INFO:Uploading model into container now
2023-06-02 17:01:13,768:INFO:_master_model_container: 2
2023-06-02 17:01:13,768:INFO:_display_container: 2
2023-06-02 17:01:13,769:INFO:Lasso(random_state=3556)
2023-06-02 17:01:13,769:INFO:create_model() successfully completed......................................
2023-06-02 17:01:13,893:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:13,893:INFO:Creating metrics dataframe
2023-06-02 17:01:13,897:INFO:Initializing Ridge Regression
2023-06-02 17:01:13,897:INFO:Total runtime is 0.01770923932393392 minutes
2023-06-02 17:01:13,898:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:13,898:INFO:Initializing create_model()
2023-06-02 17:01:13,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:13,898:INFO:Checking exceptions
2023-06-02 17:01:13,898:INFO:Importing libraries
2023-06-02 17:01:13,898:INFO:Copying training dataset
2023-06-02 17:01:13,901:INFO:Defining folds
2023-06-02 17:01:13,901:INFO:Declaring metric variables
2023-06-02 17:01:13,901:INFO:Importing untrained model
2023-06-02 17:01:13,901:INFO:Ridge Regression Imported successfully
2023-06-02 17:01:13,901:INFO:Starting cross validation
2023-06-02 17:01:13,902:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:14,257:INFO:Calculating mean and std
2023-06-02 17:01:14,258:INFO:Creating metrics dataframe
2023-06-02 17:01:14,283:INFO:Uploading results into container
2023-06-02 17:01:14,284:INFO:Uploading model into container now
2023-06-02 17:01:14,284:INFO:_master_model_container: 3
2023-06-02 17:01:14,284:INFO:_display_container: 2
2023-06-02 17:01:14,285:INFO:Ridge(random_state=3556)
2023-06-02 17:01:14,285:INFO:create_model() successfully completed......................................
2023-06-02 17:01:14,438:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:14,438:INFO:Creating metrics dataframe
2023-06-02 17:01:14,446:INFO:Initializing Elastic Net
2023-06-02 17:01:14,446:INFO:Total runtime is 0.026860896746317545 minutes
2023-06-02 17:01:14,446:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:14,446:INFO:Initializing create_model()
2023-06-02 17:01:14,446:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:14,447:INFO:Checking exceptions
2023-06-02 17:01:14,447:INFO:Importing libraries
2023-06-02 17:01:14,447:INFO:Copying training dataset
2023-06-02 17:01:14,451:INFO:Defining folds
2023-06-02 17:01:14,452:INFO:Declaring metric variables
2023-06-02 17:01:14,452:INFO:Importing untrained model
2023-06-02 17:01:14,453:INFO:Elastic Net Imported successfully
2023-06-02 17:01:14,454:INFO:Starting cross validation
2023-06-02 17:01:14,455:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:14,836:INFO:Calculating mean and std
2023-06-02 17:01:14,837:INFO:Creating metrics dataframe
2023-06-02 17:01:14,866:INFO:Uploading results into container
2023-06-02 17:01:14,867:INFO:Uploading model into container now
2023-06-02 17:01:14,867:INFO:_master_model_container: 4
2023-06-02 17:01:14,867:INFO:_display_container: 2
2023-06-02 17:01:14,868:INFO:ElasticNet(random_state=3556)
2023-06-02 17:01:14,868:INFO:create_model() successfully completed......................................
2023-06-02 17:01:14,989:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:14,989:INFO:Creating metrics dataframe
2023-06-02 17:01:14,995:INFO:Initializing Least Angle Regression
2023-06-02 17:01:14,995:INFO:Total runtime is 0.036020660400390626 minutes
2023-06-02 17:01:14,995:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:14,995:INFO:Initializing create_model()
2023-06-02 17:01:14,995:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:14,995:INFO:Checking exceptions
2023-06-02 17:01:14,995:INFO:Importing libraries
2023-06-02 17:01:14,995:INFO:Copying training dataset
2023-06-02 17:01:14,999:INFO:Defining folds
2023-06-02 17:01:14,999:INFO:Declaring metric variables
2023-06-02 17:01:14,999:INFO:Importing untrained model
2023-06-02 17:01:14,999:INFO:Least Angle Regression Imported successfully
2023-06-02 17:01:14,999:INFO:Starting cross validation
2023-06-02 17:01:15,000:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:15,050:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,061:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,075:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,094:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,167:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,221:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,227:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,252:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,314:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,323:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:15,370:INFO:Calculating mean and std
2023-06-02 17:01:15,372:INFO:Creating metrics dataframe
2023-06-02 17:01:15,398:INFO:Uploading results into container
2023-06-02 17:01:15,398:INFO:Uploading model into container now
2023-06-02 17:01:15,399:INFO:_master_model_container: 5
2023-06-02 17:01:15,399:INFO:_display_container: 2
2023-06-02 17:01:15,399:INFO:Lars(random_state=3556)
2023-06-02 17:01:15,399:INFO:create_model() successfully completed......................................
2023-06-02 17:01:15,530:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:15,530:INFO:Creating metrics dataframe
2023-06-02 17:01:15,535:INFO:Initializing Lasso Least Angle Regression
2023-06-02 17:01:15,535:INFO:Total runtime is 0.045014401276906334 minutes
2023-06-02 17:01:15,535:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:15,536:INFO:Initializing create_model()
2023-06-02 17:01:15,536:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:15,536:INFO:Checking exceptions
2023-06-02 17:01:15,536:INFO:Importing libraries
2023-06-02 17:01:15,536:INFO:Copying training dataset
2023-06-02 17:01:15,542:INFO:Defining folds
2023-06-02 17:01:15,542:INFO:Declaring metric variables
2023-06-02 17:01:15,542:INFO:Importing untrained model
2023-06-02 17:01:15,542:INFO:Lasso Least Angle Regression Imported successfully
2023-06-02 17:01:15,543:INFO:Starting cross validation
2023-06-02 17:01:15,544:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:15,593:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,621:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,626:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,643:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,731:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,743:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,745:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,775:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,850:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,856:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:01:15,936:INFO:Calculating mean and std
2023-06-02 17:01:15,937:INFO:Creating metrics dataframe
2023-06-02 17:01:15,963:INFO:Uploading results into container
2023-06-02 17:01:15,964:INFO:Uploading model into container now
2023-06-02 17:01:15,965:INFO:_master_model_container: 6
2023-06-02 17:01:15,965:INFO:_display_container: 2
2023-06-02 17:01:15,965:INFO:LassoLars(random_state=3556)
2023-06-02 17:01:15,965:INFO:create_model() successfully completed......................................
2023-06-02 17:01:16,098:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:16,098:INFO:Creating metrics dataframe
2023-06-02 17:01:16,104:INFO:Initializing Orthogonal Matching Pursuit
2023-06-02 17:01:16,104:INFO:Total runtime is 0.054494941234588624 minutes
2023-06-02 17:01:16,104:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:16,104:INFO:Initializing create_model()
2023-06-02 17:01:16,104:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:16,105:INFO:Checking exceptions
2023-06-02 17:01:16,105:INFO:Importing libraries
2023-06-02 17:01:16,105:INFO:Copying training dataset
2023-06-02 17:01:16,108:INFO:Defining folds
2023-06-02 17:01:16,108:INFO:Declaring metric variables
2023-06-02 17:01:16,108:INFO:Importing untrained model
2023-06-02 17:01:16,108:INFO:Orthogonal Matching Pursuit Imported successfully
2023-06-02 17:01:16,108:INFO:Starting cross validation
2023-06-02 17:01:16,109:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:16,153:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,165:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,177:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,190:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,240:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,275:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,290:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,310:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,351:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,378:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:01:16,442:INFO:Calculating mean and std
2023-06-02 17:01:16,443:INFO:Creating metrics dataframe
2023-06-02 17:01:16,465:INFO:Uploading results into container
2023-06-02 17:01:16,466:INFO:Uploading model into container now
2023-06-02 17:01:16,466:INFO:_master_model_container: 7
2023-06-02 17:01:16,467:INFO:_display_container: 2
2023-06-02 17:01:16,467:INFO:OrthogonalMatchingPursuit()
2023-06-02 17:01:16,467:INFO:create_model() successfully completed......................................
2023-06-02 17:01:16,593:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:16,594:INFO:Creating metrics dataframe
2023-06-02 17:01:16,598:INFO:Initializing Bayesian Ridge
2023-06-02 17:01:16,598:INFO:Total runtime is 0.06272507111231486 minutes
2023-06-02 17:01:16,598:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:16,598:INFO:Initializing create_model()
2023-06-02 17:01:16,598:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:16,598:INFO:Checking exceptions
2023-06-02 17:01:16,598:INFO:Importing libraries
2023-06-02 17:01:16,598:INFO:Copying training dataset
2023-06-02 17:01:16,606:INFO:Defining folds
2023-06-02 17:01:16,606:INFO:Declaring metric variables
2023-06-02 17:01:16,607:INFO:Importing untrained model
2023-06-02 17:01:16,607:INFO:Bayesian Ridge Imported successfully
2023-06-02 17:01:16,607:INFO:Starting cross validation
2023-06-02 17:01:16,608:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:16,917:INFO:Calculating mean and std
2023-06-02 17:01:16,917:INFO:Creating metrics dataframe
2023-06-02 17:01:16,940:INFO:Uploading results into container
2023-06-02 17:01:16,940:INFO:Uploading model into container now
2023-06-02 17:01:16,941:INFO:_master_model_container: 8
2023-06-02 17:01:16,941:INFO:_display_container: 2
2023-06-02 17:01:16,941:INFO:BayesianRidge()
2023-06-02 17:01:16,941:INFO:create_model() successfully completed......................................
2023-06-02 17:01:17,050:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:17,050:INFO:Creating metrics dataframe
2023-06-02 17:01:17,054:INFO:Initializing Passive Aggressive Regressor
2023-06-02 17:01:17,054:INFO:Total runtime is 0.07032817602157593 minutes
2023-06-02 17:01:17,054:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:17,054:INFO:Initializing create_model()
2023-06-02 17:01:17,054:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:17,054:INFO:Checking exceptions
2023-06-02 17:01:17,054:INFO:Importing libraries
2023-06-02 17:01:17,054:INFO:Copying training dataset
2023-06-02 17:01:17,058:INFO:Defining folds
2023-06-02 17:01:17,058:INFO:Declaring metric variables
2023-06-02 17:01:17,058:INFO:Importing untrained model
2023-06-02 17:01:17,059:INFO:Passive Aggressive Regressor Imported successfully
2023-06-02 17:01:17,059:INFO:Starting cross validation
2023-06-02 17:01:17,059:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:17,379:INFO:Calculating mean and std
2023-06-02 17:01:17,380:INFO:Creating metrics dataframe
2023-06-02 17:01:17,428:INFO:Uploading results into container
2023-06-02 17:01:17,429:INFO:Uploading model into container now
2023-06-02 17:01:17,429:INFO:_master_model_container: 9
2023-06-02 17:01:17,430:INFO:_display_container: 2
2023-06-02 17:01:17,430:INFO:PassiveAggressiveRegressor(random_state=3556)
2023-06-02 17:01:17,430:INFO:create_model() successfully completed......................................
2023-06-02 17:01:17,554:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:17,554:INFO:Creating metrics dataframe
2023-06-02 17:01:17,561:INFO:Initializing Huber Regressor
2023-06-02 17:01:17,562:INFO:Total runtime is 0.07880616188049316 minutes
2023-06-02 17:01:17,562:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:17,562:INFO:Initializing create_model()
2023-06-02 17:01:17,562:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:17,562:INFO:Checking exceptions
2023-06-02 17:01:17,562:INFO:Importing libraries
2023-06-02 17:01:17,562:INFO:Copying training dataset
2023-06-02 17:01:17,566:INFO:Defining folds
2023-06-02 17:01:17,566:INFO:Declaring metric variables
2023-06-02 17:01:17,566:INFO:Importing untrained model
2023-06-02 17:01:17,566:INFO:Huber Regressor Imported successfully
2023-06-02 17:01:17,566:INFO:Starting cross validation
2023-06-02 17:01:17,567:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:17,658:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,658:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,669:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,707:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,782:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,800:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,847:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,919:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,944:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:01:17,960:INFO:Calculating mean and std
2023-06-02 17:01:17,961:INFO:Creating metrics dataframe
2023-06-02 17:01:17,982:INFO:Uploading results into container
2023-06-02 17:01:17,982:INFO:Uploading model into container now
2023-06-02 17:01:17,983:INFO:_master_model_container: 10
2023-06-02 17:01:17,983:INFO:_display_container: 2
2023-06-02 17:01:17,983:INFO:HuberRegressor()
2023-06-02 17:01:17,983:INFO:create_model() successfully completed......................................
2023-06-02 17:01:18,106:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:18,106:INFO:Creating metrics dataframe
2023-06-02 17:01:18,111:INFO:Initializing K Neighbors Regressor
2023-06-02 17:01:18,111:INFO:Total runtime is 0.08794610102971395 minutes
2023-06-02 17:01:18,111:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:18,112:INFO:Initializing create_model()
2023-06-02 17:01:18,112:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:18,112:INFO:Checking exceptions
2023-06-02 17:01:18,112:INFO:Importing libraries
2023-06-02 17:01:18,112:INFO:Copying training dataset
2023-06-02 17:01:18,115:INFO:Defining folds
2023-06-02 17:01:18,115:INFO:Declaring metric variables
2023-06-02 17:01:18,115:INFO:Importing untrained model
2023-06-02 17:01:18,115:INFO:K Neighbors Regressor Imported successfully
2023-06-02 17:01:18,115:INFO:Starting cross validation
2023-06-02 17:01:18,116:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:18,445:INFO:Calculating mean and std
2023-06-02 17:01:18,446:INFO:Creating metrics dataframe
2023-06-02 17:01:18,467:INFO:Uploading results into container
2023-06-02 17:01:18,467:INFO:Uploading model into container now
2023-06-02 17:01:18,468:INFO:_master_model_container: 11
2023-06-02 17:01:18,468:INFO:_display_container: 2
2023-06-02 17:01:18,468:INFO:KNeighborsRegressor(n_jobs=-1)
2023-06-02 17:01:18,468:INFO:create_model() successfully completed......................................
2023-06-02 17:01:18,594:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:18,594:INFO:Creating metrics dataframe
2023-06-02 17:01:18,600:INFO:Initializing Decision Tree Regressor
2023-06-02 17:01:18,601:INFO:Total runtime is 0.0961211125055949 minutes
2023-06-02 17:01:18,601:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:18,601:INFO:Initializing create_model()
2023-06-02 17:01:18,602:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:18,602:INFO:Checking exceptions
2023-06-02 17:01:18,602:INFO:Importing libraries
2023-06-02 17:01:18,602:INFO:Copying training dataset
2023-06-02 17:01:18,606:INFO:Defining folds
2023-06-02 17:01:18,606:INFO:Declaring metric variables
2023-06-02 17:01:18,606:INFO:Importing untrained model
2023-06-02 17:01:18,607:INFO:Decision Tree Regressor Imported successfully
2023-06-02 17:01:18,607:INFO:Starting cross validation
2023-06-02 17:01:18,608:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:18,914:INFO:Calculating mean and std
2023-06-02 17:01:18,919:INFO:Creating metrics dataframe
2023-06-02 17:01:18,940:INFO:Uploading results into container
2023-06-02 17:01:18,941:INFO:Uploading model into container now
2023-06-02 17:01:18,941:INFO:_master_model_container: 12
2023-06-02 17:01:18,942:INFO:_display_container: 2
2023-06-02 17:01:18,942:INFO:DecisionTreeRegressor(random_state=3556)
2023-06-02 17:01:18,942:INFO:create_model() successfully completed......................................
2023-06-02 17:01:19,063:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:19,063:INFO:Creating metrics dataframe
2023-06-02 17:01:19,070:INFO:Initializing Random Forest Regressor
2023-06-02 17:01:19,070:INFO:Total runtime is 0.10392493406931559 minutes
2023-06-02 17:01:19,070:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:19,070:INFO:Initializing create_model()
2023-06-02 17:01:19,070:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:19,071:INFO:Checking exceptions
2023-06-02 17:01:19,071:INFO:Importing libraries
2023-06-02 17:01:19,071:INFO:Copying training dataset
2023-06-02 17:01:19,074:INFO:Defining folds
2023-06-02 17:01:19,074:INFO:Declaring metric variables
2023-06-02 17:01:19,075:INFO:Importing untrained model
2023-06-02 17:01:19,075:INFO:Random Forest Regressor Imported successfully
2023-06-02 17:01:19,075:INFO:Starting cross validation
2023-06-02 17:01:19,076:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:20,743:INFO:Calculating mean and std
2023-06-02 17:01:20,743:INFO:Creating metrics dataframe
2023-06-02 17:01:20,769:INFO:Uploading results into container
2023-06-02 17:01:20,770:INFO:Uploading model into container now
2023-06-02 17:01:20,770:INFO:_master_model_container: 13
2023-06-02 17:01:20,770:INFO:_display_container: 2
2023-06-02 17:01:20,770:INFO:RandomForestRegressor(n_jobs=-1, random_state=3556)
2023-06-02 17:01:20,770:INFO:create_model() successfully completed......................................
2023-06-02 17:01:20,890:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:20,890:INFO:Creating metrics dataframe
2023-06-02 17:01:20,894:INFO:Initializing Extra Trees Regressor
2023-06-02 17:01:20,894:INFO:Total runtime is 0.13433823585510254 minutes
2023-06-02 17:01:20,894:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:20,895:INFO:Initializing create_model()
2023-06-02 17:01:20,895:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:20,895:INFO:Checking exceptions
2023-06-02 17:01:20,895:INFO:Importing libraries
2023-06-02 17:01:20,895:INFO:Copying training dataset
2023-06-02 17:01:20,901:INFO:Defining folds
2023-06-02 17:01:20,901:INFO:Declaring metric variables
2023-06-02 17:01:20,901:INFO:Importing untrained model
2023-06-02 17:01:20,902:INFO:Extra Trees Regressor Imported successfully
2023-06-02 17:01:20,903:INFO:Starting cross validation
2023-06-02 17:01:20,904:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:22,561:INFO:Calculating mean and std
2023-06-02 17:01:22,562:INFO:Creating metrics dataframe
2023-06-02 17:01:22,594:INFO:Uploading results into container
2023-06-02 17:01:22,594:INFO:Uploading model into container now
2023-06-02 17:01:22,595:INFO:_master_model_container: 14
2023-06-02 17:01:22,595:INFO:_display_container: 2
2023-06-02 17:01:22,595:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3556)
2023-06-02 17:01:22,595:INFO:create_model() successfully completed......................................
2023-06-02 17:01:22,721:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:22,721:INFO:Creating metrics dataframe
2023-06-02 17:01:22,727:INFO:Initializing AdaBoost Regressor
2023-06-02 17:01:22,727:INFO:Total runtime is 0.16487765709559124 minutes
2023-06-02 17:01:22,728:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:22,728:INFO:Initializing create_model()
2023-06-02 17:01:22,728:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:22,728:INFO:Checking exceptions
2023-06-02 17:01:22,728:INFO:Importing libraries
2023-06-02 17:01:22,728:INFO:Copying training dataset
2023-06-02 17:01:22,732:INFO:Defining folds
2023-06-02 17:01:22,732:INFO:Declaring metric variables
2023-06-02 17:01:22,732:INFO:Importing untrained model
2023-06-02 17:01:22,733:INFO:AdaBoost Regressor Imported successfully
2023-06-02 17:01:22,733:INFO:Starting cross validation
2023-06-02 17:01:22,734:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:23,417:INFO:Calculating mean and std
2023-06-02 17:01:23,418:INFO:Creating metrics dataframe
2023-06-02 17:01:23,456:INFO:Uploading results into container
2023-06-02 17:01:23,456:INFO:Uploading model into container now
2023-06-02 17:01:23,457:INFO:_master_model_container: 15
2023-06-02 17:01:23,457:INFO:_display_container: 2
2023-06-02 17:01:23,457:INFO:AdaBoostRegressor(random_state=3556)
2023-06-02 17:01:23,457:INFO:create_model() successfully completed......................................
2023-06-02 17:01:23,574:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:23,574:INFO:Creating metrics dataframe
2023-06-02 17:01:23,579:INFO:Initializing Gradient Boosting Regressor
2023-06-02 17:01:23,579:INFO:Total runtime is 0.17907857100168864 minutes
2023-06-02 17:01:23,579:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:23,579:INFO:Initializing create_model()
2023-06-02 17:01:23,579:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:23,579:INFO:Checking exceptions
2023-06-02 17:01:23,579:INFO:Importing libraries
2023-06-02 17:01:23,580:INFO:Copying training dataset
2023-06-02 17:01:23,582:INFO:Defining folds
2023-06-02 17:01:23,583:INFO:Declaring metric variables
2023-06-02 17:01:23,583:INFO:Importing untrained model
2023-06-02 17:01:23,583:INFO:Gradient Boosting Regressor Imported successfully
2023-06-02 17:01:23,583:INFO:Starting cross validation
2023-06-02 17:01:23,584:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:24,724:INFO:Calculating mean and std
2023-06-02 17:01:24,725:INFO:Creating metrics dataframe
2023-06-02 17:01:24,761:INFO:Uploading results into container
2023-06-02 17:01:24,761:INFO:Uploading model into container now
2023-06-02 17:01:24,762:INFO:_master_model_container: 16
2023-06-02 17:01:24,762:INFO:_display_container: 2
2023-06-02 17:01:24,762:INFO:GradientBoostingRegressor(random_state=3556)
2023-06-02 17:01:24,762:INFO:create_model() successfully completed......................................
2023-06-02 17:01:24,897:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:24,897:INFO:Creating metrics dataframe
2023-06-02 17:01:24,901:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 17:01:24,901:INFO:Total runtime is 0.2011180321375529 minutes
2023-06-02 17:01:24,901:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:24,901:INFO:Initializing create_model()
2023-06-02 17:01:24,901:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:24,901:INFO:Checking exceptions
2023-06-02 17:01:24,901:INFO:Importing libraries
2023-06-02 17:01:24,901:INFO:Copying training dataset
2023-06-02 17:01:24,906:INFO:Defining folds
2023-06-02 17:01:24,906:INFO:Declaring metric variables
2023-06-02 17:01:24,907:INFO:Importing untrained model
2023-06-02 17:01:24,907:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 17:01:24,907:INFO:Starting cross validation
2023-06-02 17:01:24,908:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:25,564:INFO:Calculating mean and std
2023-06-02 17:01:25,565:INFO:Creating metrics dataframe
2023-06-02 17:01:25,603:INFO:Uploading results into container
2023-06-02 17:01:25,604:INFO:Uploading model into container now
2023-06-02 17:01:25,605:INFO:_master_model_container: 17
2023-06-02 17:01:25,605:INFO:_display_container: 2
2023-06-02 17:01:25,605:INFO:LGBMRegressor(random_state=3556)
2023-06-02 17:01:25,605:INFO:create_model() successfully completed......................................
2023-06-02 17:01:25,734:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:25,734:INFO:Creating metrics dataframe
2023-06-02 17:01:25,739:INFO:Initializing Dummy Regressor
2023-06-02 17:01:25,739:INFO:Total runtime is 0.21509015560150146 minutes
2023-06-02 17:01:25,739:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:25,740:INFO:Initializing create_model()
2023-06-02 17:01:25,740:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDB20370>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:25,740:INFO:Checking exceptions
2023-06-02 17:01:25,740:INFO:Importing libraries
2023-06-02 17:01:25,740:INFO:Copying training dataset
2023-06-02 17:01:25,745:INFO:Defining folds
2023-06-02 17:01:25,745:INFO:Declaring metric variables
2023-06-02 17:01:25,745:INFO:Importing untrained model
2023-06-02 17:01:25,745:INFO:Dummy Regressor Imported successfully
2023-06-02 17:01:25,746:INFO:Starting cross validation
2023-06-02 17:01:25,746:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:01:26,176:INFO:Calculating mean and std
2023-06-02 17:01:26,177:INFO:Creating metrics dataframe
2023-06-02 17:01:26,224:INFO:Uploading results into container
2023-06-02 17:01:26,225:INFO:Uploading model into container now
2023-06-02 17:01:26,225:INFO:_master_model_container: 18
2023-06-02 17:01:26,225:INFO:_display_container: 2
2023-06-02 17:01:26,225:INFO:DummyRegressor()
2023-06-02 17:01:26,225:INFO:create_model() successfully completed......................................
2023-06-02 17:01:26,352:INFO:SubProcess create_model() end ==================================
2023-06-02 17:01:26,352:INFO:Creating metrics dataframe
2023-06-02 17:01:26,358:INFO:Initializing create_model()
2023-06-02 17:01:26,358:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D483E94AC0>, estimator=ExtraTreesRegressor(n_jobs=-1, random_state=3556), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:26,358:INFO:Checking exceptions
2023-06-02 17:01:26,359:INFO:Importing libraries
2023-06-02 17:01:26,359:INFO:Copying training dataset
2023-06-02 17:01:26,361:INFO:Defining folds
2023-06-02 17:01:26,361:INFO:Declaring metric variables
2023-06-02 17:01:26,362:INFO:Importing untrained model
2023-06-02 17:01:26,362:INFO:Declaring custom model
2023-06-02 17:01:26,362:INFO:Extra Trees Regressor Imported successfully
2023-06-02 17:01:26,363:INFO:Cross validation set to False
2023-06-02 17:01:26,363:INFO:Fitting Model
2023-06-02 17:01:26,483:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3556)
2023-06-02 17:01:26,483:INFO:create_model() successfully completed......................................
2023-06-02 17:01:26,615:INFO:_master_model_container: 18
2023-06-02 17:01:26,615:INFO:_display_container: 2
2023-06-02 17:01:26,616:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=3556)
2023-06-02 17:01:26,616:INFO:compare_models() successfully completed......................................
2023-06-02 17:01:26,624:INFO:Initializing save_model()
2023-06-02 17:01:26,625:INFO:save_model(model=ExtraTreesRegressor(n_jobs=-1, random_state=3556), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2023-06-02 17:01:26,625:INFO:Adding model into prep_pipe
2023-06-02 17:01:26,671:INFO:best_model.pkl saved in current working directory
2023-06-02 17:01:26,701:INFO:Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('trained_model',
                 ExtraTreesRegressor(n_jobs=-1, random_state=3556))])
2023-06-02 17:01:26,701:INFO:save_model() successfully completed......................................
2023-06-02 17:01:57,535:INFO:PyCaret RegressionExperiment
2023-06-02 17:01:57,535:INFO:Logging name: reg-default-name
2023-06-02 17:01:57,535:INFO:ML Usecase: MLUsecase.REGRESSION
2023-06-02 17:01:57,535:INFO:version 3.0.2
2023-06-02 17:01:57,535:INFO:Initializing setup()
2023-06-02 17:01:57,535:INFO:self.USI: 69c5
2023-06-02 17:01:57,535:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'X', 'html_param', 'X_test', 'log_plots_param', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id', 'transform_target_param'}
2023-06-02 17:01:57,535:INFO:Checking environment
2023-06-02 17:01:57,535:INFO:python_version: 3.9.12
2023-06-02 17:01:57,535:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 17:01:57,535:INFO:machine: AMD64
2023-06-02 17:01:57,535:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 17:01:57,540:INFO:Memory: svmem(total=8345964544, available=1189875712, percent=85.7, used=7156088832, free=1189875712)
2023-06-02 17:01:57,540:INFO:Physical Core: 2
2023-06-02 17:01:57,540:INFO:Logical Core: 4
2023-06-02 17:01:57,540:INFO:Checking libraries
2023-06-02 17:01:57,540:INFO:System:
2023-06-02 17:01:57,540:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 17:01:57,540:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 17:01:57,541:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 17:01:57,541:INFO:PyCaret required dependencies:
2023-06-02 17:01:57,541:INFO:                 pip: 21.2.4
2023-06-02 17:01:57,541:INFO:          setuptools: 61.2.0
2023-06-02 17:01:57,541:INFO:             pycaret: 3.0.2
2023-06-02 17:01:57,541:INFO:             IPython: 8.2.0
2023-06-02 17:01:57,541:INFO:          ipywidgets: 7.6.5
2023-06-02 17:01:57,541:INFO:                tqdm: 4.64.0
2023-06-02 17:01:57,541:INFO:               numpy: 1.21.6
2023-06-02 17:01:57,541:INFO:              pandas: 1.4.2
2023-06-02 17:01:57,541:INFO:              jinja2: 2.11.3
2023-06-02 17:01:57,541:INFO:               scipy: 1.7.3
2023-06-02 17:01:57,541:INFO:              joblib: 1.2.0
2023-06-02 17:01:57,541:INFO:             sklearn: 1.0.2
2023-06-02 17:01:57,541:INFO:                pyod: 1.0.9
2023-06-02 17:01:57,541:INFO:            imblearn: 0.10.1
2023-06-02 17:01:57,541:INFO:   category_encoders: 2.6.1
2023-06-02 17:01:57,541:INFO:            lightgbm: 3.3.5
2023-06-02 17:01:57,541:INFO:               numba: 0.55.1
2023-06-02 17:01:57,541:INFO:            requests: 2.27.1
2023-06-02 17:01:57,541:INFO:          matplotlib: 3.5.1
2023-06-02 17:01:57,541:INFO:          scikitplot: 0.3.7
2023-06-02 17:01:57,541:INFO:         yellowbrick: 1.5
2023-06-02 17:01:57,541:INFO:              plotly: 5.6.0
2023-06-02 17:01:57,541:INFO:             kaleido: 0.2.1
2023-06-02 17:01:57,541:INFO:         statsmodels: 0.13.2
2023-06-02 17:01:57,541:INFO:              sktime: 0.17.0
2023-06-02 17:01:57,541:INFO:               tbats: 1.1.3
2023-06-02 17:01:57,541:INFO:            pmdarima: 2.0.3
2023-06-02 17:01:57,541:INFO:              psutil: 5.9.5
2023-06-02 17:01:57,542:INFO:PyCaret optional dependencies:
2023-06-02 17:01:57,542:INFO:                shap: Not installed
2023-06-02 17:01:57,542:INFO:           interpret: Not installed
2023-06-02 17:01:57,542:INFO:                umap: Not installed
2023-06-02 17:01:57,542:INFO:    pandas_profiling: 4.2.0
2023-06-02 17:01:57,542:INFO:  explainerdashboard: Not installed
2023-06-02 17:01:57,542:INFO:             autoviz: Not installed
2023-06-02 17:01:57,542:INFO:           fairlearn: Not installed
2023-06-02 17:01:57,542:INFO:             xgboost: Not installed
2023-06-02 17:01:57,542:INFO:            catboost: Not installed
2023-06-02 17:01:57,542:INFO:              kmodes: Not installed
2023-06-02 17:01:57,542:INFO:             mlxtend: Not installed
2023-06-02 17:01:57,542:INFO:       statsforecast: Not installed
2023-06-02 17:01:57,542:INFO:        tune_sklearn: Not installed
2023-06-02 17:01:57,542:INFO:                 ray: Not installed
2023-06-02 17:01:57,542:INFO:            hyperopt: Not installed
2023-06-02 17:01:57,542:INFO:              optuna: Not installed
2023-06-02 17:01:57,542:INFO:               skopt: Not installed
2023-06-02 17:01:57,542:INFO:              mlflow: Not installed
2023-06-02 17:01:57,542:INFO:              gradio: Not installed
2023-06-02 17:01:57,542:INFO:             fastapi: Not installed
2023-06-02 17:01:57,542:INFO:             uvicorn: Not installed
2023-06-02 17:01:57,542:INFO:              m2cgen: Not installed
2023-06-02 17:01:57,542:INFO:           evidently: Not installed
2023-06-02 17:01:57,542:INFO:               fugue: Not installed
2023-06-02 17:01:57,542:INFO:           streamlit: 1.23.1
2023-06-02 17:01:57,542:INFO:             prophet: Not installed
2023-06-02 17:01:57,542:INFO:None
2023-06-02 17:01:57,542:INFO:Set up data.
2023-06-02 17:01:57,546:INFO:Set up train/test split.
2023-06-02 17:01:57,549:INFO:Set up index.
2023-06-02 17:01:57,549:INFO:Set up folding strategy.
2023-06-02 17:01:57,549:INFO:Assigning column types.
2023-06-02 17:01:57,552:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 17:01:57,552:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,558:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,562:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,636:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,705:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,707:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,707:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,707:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,712:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,717:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,778:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,827:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,827:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,828:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,828:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-06-02 17:01:57,832:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,838:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,904:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,951:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,951:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,951:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:57,956:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:01:57,961:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,027:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,069:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,070:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,070:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,070:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-06-02 17:01:58,079:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,134:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,180:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,181:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,181:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,190:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,246:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,299:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,300:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,300:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,301:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-06-02 17:01:58,365:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,416:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,416:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,417:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,482:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,531:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,532:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,532:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,533:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 17:01:58,606:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,657:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,739:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:01:58,795:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,795:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,796:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-06-02 17:01:58,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:58,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,016:INFO:Preparing preprocessing pipeline...
2023-06-02 17:01:59,016:INFO:Set up simple imputation.
2023-06-02 17:01:59,028:INFO:Finished creating preprocessing pipeline.
2023-06-02 17:01:59,031:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-06-02 17:01:59,031:INFO:Creating final display dataframe.
2023-06-02 17:01:59,090:INFO:Setup _display_container:                     Description             Value
0                    Session id               351
1                        Target           Outcome
2                   Target type        Regression
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              69c5
2023-06-02 17:01:59,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,507:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,623:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:01:59,624:INFO:setup() successfully completed in 2.11s...............
2023-06-02 17:01:59,627:INFO:Initializing compare_models()
2023-06-02 17:01:59,628:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-06-02 17:01:59,628:INFO:Checking exceptions
2023-06-02 17:01:59,631:INFO:Preparing display monitor
2023-06-02 17:01:59,633:INFO:Initializing Linear Regression
2023-06-02 17:01:59,633:INFO:Total runtime is 0.0 minutes
2023-06-02 17:01:59,633:INFO:SubProcess create_model() called ==================================
2023-06-02 17:01:59,633:INFO:Initializing create_model()
2023-06-02 17:01:59,633:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:01:59,634:INFO:Checking exceptions
2023-06-02 17:01:59,634:INFO:Importing libraries
2023-06-02 17:01:59,634:INFO:Copying training dataset
2023-06-02 17:01:59,637:INFO:Defining folds
2023-06-02 17:01:59,637:INFO:Declaring metric variables
2023-06-02 17:01:59,637:INFO:Importing untrained model
2023-06-02 17:01:59,637:INFO:Linear Regression Imported successfully
2023-06-02 17:01:59,637:INFO:Starting cross validation
2023-06-02 17:01:59,638:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:00,157:INFO:Calculating mean and std
2023-06-02 17:02:00,158:INFO:Creating metrics dataframe
2023-06-02 17:02:00,210:INFO:Uploading results into container
2023-06-02 17:02:00,211:INFO:Uploading model into container now
2023-06-02 17:02:00,211:INFO:_master_model_container: 1
2023-06-02 17:02:00,212:INFO:_display_container: 2
2023-06-02 17:02:00,212:INFO:LinearRegression(n_jobs=-1)
2023-06-02 17:02:00,212:INFO:create_model() successfully completed......................................
2023-06-02 17:02:00,329:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:00,329:INFO:Creating metrics dataframe
2023-06-02 17:02:00,333:INFO:Initializing Lasso Regression
2023-06-02 17:02:00,333:INFO:Total runtime is 0.011667005221048991 minutes
2023-06-02 17:02:00,335:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:00,335:INFO:Initializing create_model()
2023-06-02 17:02:00,335:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:00,335:INFO:Checking exceptions
2023-06-02 17:02:00,335:INFO:Importing libraries
2023-06-02 17:02:00,335:INFO:Copying training dataset
2023-06-02 17:02:00,339:INFO:Defining folds
2023-06-02 17:02:00,339:INFO:Declaring metric variables
2023-06-02 17:02:00,339:INFO:Importing untrained model
2023-06-02 17:02:00,339:INFO:Lasso Regression Imported successfully
2023-06-02 17:02:00,340:INFO:Starting cross validation
2023-06-02 17:02:00,340:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:00,804:INFO:Calculating mean and std
2023-06-02 17:02:00,805:INFO:Creating metrics dataframe
2023-06-02 17:02:00,848:INFO:Uploading results into container
2023-06-02 17:02:00,849:INFO:Uploading model into container now
2023-06-02 17:02:00,849:INFO:_master_model_container: 2
2023-06-02 17:02:00,849:INFO:_display_container: 2
2023-06-02 17:02:00,849:INFO:Lasso(random_state=351)
2023-06-02 17:02:00,850:INFO:create_model() successfully completed......................................
2023-06-02 17:02:00,986:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:00,986:INFO:Creating metrics dataframe
2023-06-02 17:02:00,992:INFO:Initializing Ridge Regression
2023-06-02 17:02:00,992:INFO:Total runtime is 0.022638440132141113 minutes
2023-06-02 17:02:00,993:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:00,993:INFO:Initializing create_model()
2023-06-02 17:02:00,993:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:00,993:INFO:Checking exceptions
2023-06-02 17:02:00,993:INFO:Importing libraries
2023-06-02 17:02:00,993:INFO:Copying training dataset
2023-06-02 17:02:00,997:INFO:Defining folds
2023-06-02 17:02:00,997:INFO:Declaring metric variables
2023-06-02 17:02:00,997:INFO:Importing untrained model
2023-06-02 17:02:00,997:INFO:Ridge Regression Imported successfully
2023-06-02 17:02:00,997:INFO:Starting cross validation
2023-06-02 17:02:00,998:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:01,478:INFO:Calculating mean and std
2023-06-02 17:02:01,479:INFO:Creating metrics dataframe
2023-06-02 17:02:01,521:INFO:Uploading results into container
2023-06-02 17:02:01,522:INFO:Uploading model into container now
2023-06-02 17:02:01,522:INFO:_master_model_container: 3
2023-06-02 17:02:01,522:INFO:_display_container: 2
2023-06-02 17:02:01,522:INFO:Ridge(random_state=351)
2023-06-02 17:02:01,523:INFO:create_model() successfully completed......................................
2023-06-02 17:02:01,639:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:01,639:INFO:Creating metrics dataframe
2023-06-02 17:02:01,643:INFO:Initializing Elastic Net
2023-06-02 17:02:01,644:INFO:Total runtime is 0.033512059847513834 minutes
2023-06-02 17:02:01,644:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:01,644:INFO:Initializing create_model()
2023-06-02 17:02:01,644:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:01,644:INFO:Checking exceptions
2023-06-02 17:02:01,644:INFO:Importing libraries
2023-06-02 17:02:01,644:INFO:Copying training dataset
2023-06-02 17:02:01,647:INFO:Defining folds
2023-06-02 17:02:01,647:INFO:Declaring metric variables
2023-06-02 17:02:01,648:INFO:Importing untrained model
2023-06-02 17:02:01,648:INFO:Elastic Net Imported successfully
2023-06-02 17:02:01,648:INFO:Starting cross validation
2023-06-02 17:02:01,649:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:02,149:INFO:Calculating mean and std
2023-06-02 17:02:02,149:INFO:Creating metrics dataframe
2023-06-02 17:02:02,191:INFO:Uploading results into container
2023-06-02 17:02:02,191:INFO:Uploading model into container now
2023-06-02 17:02:02,192:INFO:_master_model_container: 4
2023-06-02 17:02:02,192:INFO:_display_container: 2
2023-06-02 17:02:02,192:INFO:ElasticNet(random_state=351)
2023-06-02 17:02:02,192:INFO:create_model() successfully completed......................................
2023-06-02 17:02:02,306:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:02,306:INFO:Creating metrics dataframe
2023-06-02 17:02:02,310:INFO:Initializing Least Angle Regression
2023-06-02 17:02:02,310:INFO:Total runtime is 0.044603931903839114 minutes
2023-06-02 17:02:02,310:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:02,310:INFO:Initializing create_model()
2023-06-02 17:02:02,310:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:02,310:INFO:Checking exceptions
2023-06-02 17:02:02,310:INFO:Importing libraries
2023-06-02 17:02:02,310:INFO:Copying training dataset
2023-06-02 17:02:02,313:INFO:Defining folds
2023-06-02 17:02:02,313:INFO:Declaring metric variables
2023-06-02 17:02:02,314:INFO:Importing untrained model
2023-06-02 17:02:02,314:INFO:Least Angle Regression Imported successfully
2023-06-02 17:02:02,314:INFO:Starting cross validation
2023-06-02 17:02:02,315:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:02,364:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,376:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,390:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,402:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,490:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,507:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,524:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,560:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,616:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,630:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:02,768:INFO:Calculating mean and std
2023-06-02 17:02:02,769:INFO:Creating metrics dataframe
2023-06-02 17:02:02,817:INFO:Uploading results into container
2023-06-02 17:02:02,818:INFO:Uploading model into container now
2023-06-02 17:02:02,818:INFO:_master_model_container: 5
2023-06-02 17:02:02,818:INFO:_display_container: 2
2023-06-02 17:02:02,818:INFO:Lars(random_state=351)
2023-06-02 17:02:02,819:INFO:create_model() successfully completed......................................
2023-06-02 17:02:02,949:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:02,950:INFO:Creating metrics dataframe
2023-06-02 17:02:02,956:INFO:Initializing Lasso Least Angle Regression
2023-06-02 17:02:02,956:INFO:Total runtime is 0.055370720227559414 minutes
2023-06-02 17:02:02,957:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:02,958:INFO:Initializing create_model()
2023-06-02 17:02:02,958:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:02,958:INFO:Checking exceptions
2023-06-02 17:02:02,958:INFO:Importing libraries
2023-06-02 17:02:02,958:INFO:Copying training dataset
2023-06-02 17:02:02,962:INFO:Defining folds
2023-06-02 17:02:02,962:INFO:Declaring metric variables
2023-06-02 17:02:02,962:INFO:Importing untrained model
2023-06-02 17:02:02,963:INFO:Lasso Least Angle Regression Imported successfully
2023-06-02 17:02:02,963:INFO:Starting cross validation
2023-06-02 17:02:02,963:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:03,020:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,034:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,049:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,067:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,211:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,220:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,237:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,366:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,382:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:02:03,528:INFO:Calculating mean and std
2023-06-02 17:02:03,529:INFO:Creating metrics dataframe
2023-06-02 17:02:03,576:INFO:Uploading results into container
2023-06-02 17:02:03,577:INFO:Uploading model into container now
2023-06-02 17:02:03,577:INFO:_master_model_container: 6
2023-06-02 17:02:03,577:INFO:_display_container: 2
2023-06-02 17:02:03,578:INFO:LassoLars(random_state=351)
2023-06-02 17:02:03,578:INFO:create_model() successfully completed......................................
2023-06-02 17:02:03,714:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:03,714:INFO:Creating metrics dataframe
2023-06-02 17:02:03,718:INFO:Initializing Orthogonal Matching Pursuit
2023-06-02 17:02:03,719:INFO:Total runtime is 0.06809397538503012 minutes
2023-06-02 17:02:03,719:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:03,719:INFO:Initializing create_model()
2023-06-02 17:02:03,719:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:03,719:INFO:Checking exceptions
2023-06-02 17:02:03,719:INFO:Importing libraries
2023-06-02 17:02:03,719:INFO:Copying training dataset
2023-06-02 17:02:03,723:INFO:Defining folds
2023-06-02 17:02:03,723:INFO:Declaring metric variables
2023-06-02 17:02:03,723:INFO:Importing untrained model
2023-06-02 17:02:03,723:INFO:Orthogonal Matching Pursuit Imported successfully
2023-06-02 17:02:03,724:INFO:Starting cross validation
2023-06-02 17:02:03,724:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:03,768:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,779:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,790:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,803:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,895:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,913:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,934:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:03,946:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:04,025:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:04,046:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:02:04,161:INFO:Calculating mean and std
2023-06-02 17:02:04,162:INFO:Creating metrics dataframe
2023-06-02 17:02:04,209:INFO:Uploading results into container
2023-06-02 17:02:04,210:INFO:Uploading model into container now
2023-06-02 17:02:04,210:INFO:_master_model_container: 7
2023-06-02 17:02:04,210:INFO:_display_container: 2
2023-06-02 17:02:04,210:INFO:OrthogonalMatchingPursuit()
2023-06-02 17:02:04,210:INFO:create_model() successfully completed......................................
2023-06-02 17:02:04,345:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:04,345:INFO:Creating metrics dataframe
2023-06-02 17:02:04,351:INFO:Initializing Bayesian Ridge
2023-06-02 17:02:04,351:INFO:Total runtime is 0.07863357067108155 minutes
2023-06-02 17:02:04,351:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:04,352:INFO:Initializing create_model()
2023-06-02 17:02:04,352:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:04,352:INFO:Checking exceptions
2023-06-02 17:02:04,352:INFO:Importing libraries
2023-06-02 17:02:04,352:INFO:Copying training dataset
2023-06-02 17:02:04,356:INFO:Defining folds
2023-06-02 17:02:04,356:INFO:Declaring metric variables
2023-06-02 17:02:04,358:INFO:Importing untrained model
2023-06-02 17:02:04,358:INFO:Bayesian Ridge Imported successfully
2023-06-02 17:02:04,358:INFO:Starting cross validation
2023-06-02 17:02:04,359:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:04,809:INFO:Calculating mean and std
2023-06-02 17:02:04,810:INFO:Creating metrics dataframe
2023-06-02 17:02:04,869:INFO:Uploading results into container
2023-06-02 17:02:04,869:INFO:Uploading model into container now
2023-06-02 17:02:04,870:INFO:_master_model_container: 8
2023-06-02 17:02:04,870:INFO:_display_container: 2
2023-06-02 17:02:04,870:INFO:BayesianRidge()
2023-06-02 17:02:04,870:INFO:create_model() successfully completed......................................
2023-06-02 17:02:04,988:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:04,988:INFO:Creating metrics dataframe
2023-06-02 17:02:04,992:INFO:Initializing Passive Aggressive Regressor
2023-06-02 17:02:04,992:INFO:Total runtime is 0.089303990205129 minutes
2023-06-02 17:02:04,992:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:04,992:INFO:Initializing create_model()
2023-06-02 17:02:04,992:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:04,993:INFO:Checking exceptions
2023-06-02 17:02:04,993:INFO:Importing libraries
2023-06-02 17:02:04,993:INFO:Copying training dataset
2023-06-02 17:02:04,996:INFO:Defining folds
2023-06-02 17:02:04,996:INFO:Declaring metric variables
2023-06-02 17:02:04,996:INFO:Importing untrained model
2023-06-02 17:02:04,996:INFO:Passive Aggressive Regressor Imported successfully
2023-06-02 17:02:04,996:INFO:Starting cross validation
2023-06-02 17:02:04,997:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:05,434:INFO:Calculating mean and std
2023-06-02 17:02:05,435:INFO:Creating metrics dataframe
2023-06-02 17:02:05,477:INFO:Uploading results into container
2023-06-02 17:02:05,478:INFO:Uploading model into container now
2023-06-02 17:02:05,478:INFO:_master_model_container: 9
2023-06-02 17:02:05,480:INFO:_display_container: 2
2023-06-02 17:02:05,480:INFO:PassiveAggressiveRegressor(random_state=351)
2023-06-02 17:02:05,480:INFO:create_model() successfully completed......................................
2023-06-02 17:02:05,593:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:05,593:INFO:Creating metrics dataframe
2023-06-02 17:02:05,604:INFO:Initializing Huber Regressor
2023-06-02 17:02:05,605:INFO:Total runtime is 0.099523397286733 minutes
2023-06-02 17:02:05,605:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:05,606:INFO:Initializing create_model()
2023-06-02 17:02:05,606:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:05,606:INFO:Checking exceptions
2023-06-02 17:02:05,606:INFO:Importing libraries
2023-06-02 17:02:05,606:INFO:Copying training dataset
2023-06-02 17:02:05,610:INFO:Defining folds
2023-06-02 17:02:05,611:INFO:Declaring metric variables
2023-06-02 17:02:05,611:INFO:Importing untrained model
2023-06-02 17:02:05,611:INFO:Huber Regressor Imported successfully
2023-06-02 17:02:05,611:INFO:Starting cross validation
2023-06-02 17:02:05,612:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:05,700:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,710:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,721:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,729:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,855:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,885:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,896:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:05,914:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:06,021:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:06,029:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:02:06,124:INFO:Calculating mean and std
2023-06-02 17:02:06,125:INFO:Creating metrics dataframe
2023-06-02 17:02:06,175:INFO:Uploading results into container
2023-06-02 17:02:06,176:INFO:Uploading model into container now
2023-06-02 17:02:06,177:INFO:_master_model_container: 10
2023-06-02 17:02:06,177:INFO:_display_container: 2
2023-06-02 17:02:06,177:INFO:HuberRegressor()
2023-06-02 17:02:06,177:INFO:create_model() successfully completed......................................
2023-06-02 17:02:06,289:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:06,290:INFO:Creating metrics dataframe
2023-06-02 17:02:06,293:INFO:Initializing K Neighbors Regressor
2023-06-02 17:02:06,293:INFO:Total runtime is 0.11098551750183105 minutes
2023-06-02 17:02:06,294:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:06,294:INFO:Initializing create_model()
2023-06-02 17:02:06,295:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:06,295:INFO:Checking exceptions
2023-06-02 17:02:06,295:INFO:Importing libraries
2023-06-02 17:02:06,295:INFO:Copying training dataset
2023-06-02 17:02:06,304:INFO:Defining folds
2023-06-02 17:02:06,304:INFO:Declaring metric variables
2023-06-02 17:02:06,304:INFO:Importing untrained model
2023-06-02 17:02:06,304:INFO:K Neighbors Regressor Imported successfully
2023-06-02 17:02:06,305:INFO:Starting cross validation
2023-06-02 17:02:06,306:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:06,869:INFO:Calculating mean and std
2023-06-02 17:02:06,870:INFO:Creating metrics dataframe
2023-06-02 17:02:06,917:INFO:Uploading results into container
2023-06-02 17:02:06,918:INFO:Uploading model into container now
2023-06-02 17:02:06,918:INFO:_master_model_container: 11
2023-06-02 17:02:06,918:INFO:_display_container: 2
2023-06-02 17:02:06,919:INFO:KNeighborsRegressor(n_jobs=-1)
2023-06-02 17:02:06,919:INFO:create_model() successfully completed......................................
2023-06-02 17:02:07,052:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:07,053:INFO:Creating metrics dataframe
2023-06-02 17:02:07,060:INFO:Initializing Decision Tree Regressor
2023-06-02 17:02:07,060:INFO:Total runtime is 0.12377090454101562 minutes
2023-06-02 17:02:07,060:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:07,060:INFO:Initializing create_model()
2023-06-02 17:02:07,060:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:07,060:INFO:Checking exceptions
2023-06-02 17:02:07,061:INFO:Importing libraries
2023-06-02 17:02:07,061:INFO:Copying training dataset
2023-06-02 17:02:07,065:INFO:Defining folds
2023-06-02 17:02:07,065:INFO:Declaring metric variables
2023-06-02 17:02:07,065:INFO:Importing untrained model
2023-06-02 17:02:07,065:INFO:Decision Tree Regressor Imported successfully
2023-06-02 17:02:07,066:INFO:Starting cross validation
2023-06-02 17:02:07,066:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:07,536:INFO:Calculating mean and std
2023-06-02 17:02:07,537:INFO:Creating metrics dataframe
2023-06-02 17:02:07,575:INFO:Uploading results into container
2023-06-02 17:02:07,576:INFO:Uploading model into container now
2023-06-02 17:02:07,577:INFO:_master_model_container: 12
2023-06-02 17:02:07,577:INFO:_display_container: 2
2023-06-02 17:02:07,577:INFO:DecisionTreeRegressor(random_state=351)
2023-06-02 17:02:07,577:INFO:create_model() successfully completed......................................
2023-06-02 17:02:07,710:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:07,710:INFO:Creating metrics dataframe
2023-06-02 17:02:07,714:INFO:Initializing Random Forest Regressor
2023-06-02 17:02:07,714:INFO:Total runtime is 0.13467884063720703 minutes
2023-06-02 17:02:07,715:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:07,715:INFO:Initializing create_model()
2023-06-02 17:02:07,715:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:07,715:INFO:Checking exceptions
2023-06-02 17:02:07,715:INFO:Importing libraries
2023-06-02 17:02:07,715:INFO:Copying training dataset
2023-06-02 17:02:07,719:INFO:Defining folds
2023-06-02 17:02:07,719:INFO:Declaring metric variables
2023-06-02 17:02:07,721:INFO:Importing untrained model
2023-06-02 17:02:07,722:INFO:Random Forest Regressor Imported successfully
2023-06-02 17:02:07,722:INFO:Starting cross validation
2023-06-02 17:02:07,723:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:09,844:INFO:Calculating mean and std
2023-06-02 17:02:09,857:INFO:Creating metrics dataframe
2023-06-02 17:02:09,903:INFO:Uploading results into container
2023-06-02 17:02:09,904:INFO:Uploading model into container now
2023-06-02 17:02:09,905:INFO:_master_model_container: 13
2023-06-02 17:02:09,905:INFO:_display_container: 2
2023-06-02 17:02:09,905:INFO:RandomForestRegressor(n_jobs=-1, random_state=351)
2023-06-02 17:02:09,905:INFO:create_model() successfully completed......................................
2023-06-02 17:02:10,043:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:10,043:INFO:Creating metrics dataframe
2023-06-02 17:02:10,048:INFO:Initializing Extra Trees Regressor
2023-06-02 17:02:10,048:INFO:Total runtime is 0.17357671658198037 minutes
2023-06-02 17:02:10,048:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:10,048:INFO:Initializing create_model()
2023-06-02 17:02:10,049:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:10,049:INFO:Checking exceptions
2023-06-02 17:02:10,049:INFO:Importing libraries
2023-06-02 17:02:10,049:INFO:Copying training dataset
2023-06-02 17:02:10,052:INFO:Defining folds
2023-06-02 17:02:10,052:INFO:Declaring metric variables
2023-06-02 17:02:10,052:INFO:Importing untrained model
2023-06-02 17:02:10,053:INFO:Extra Trees Regressor Imported successfully
2023-06-02 17:02:10,053:INFO:Starting cross validation
2023-06-02 17:02:10,053:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:11,798:INFO:Calculating mean and std
2023-06-02 17:02:11,799:INFO:Creating metrics dataframe
2023-06-02 17:02:11,848:INFO:Uploading results into container
2023-06-02 17:02:11,849:INFO:Uploading model into container now
2023-06-02 17:02:11,850:INFO:_master_model_container: 14
2023-06-02 17:02:11,850:INFO:_display_container: 2
2023-06-02 17:02:11,850:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=351)
2023-06-02 17:02:11,850:INFO:create_model() successfully completed......................................
2023-06-02 17:02:11,988:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:11,988:INFO:Creating metrics dataframe
2023-06-02 17:02:11,993:INFO:Initializing AdaBoost Regressor
2023-06-02 17:02:11,993:INFO:Total runtime is 0.2059995412826538 minutes
2023-06-02 17:02:11,994:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:11,994:INFO:Initializing create_model()
2023-06-02 17:02:11,994:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:11,994:INFO:Checking exceptions
2023-06-02 17:02:11,994:INFO:Importing libraries
2023-06-02 17:02:11,994:INFO:Copying training dataset
2023-06-02 17:02:11,997:INFO:Defining folds
2023-06-02 17:02:11,997:INFO:Declaring metric variables
2023-06-02 17:02:11,997:INFO:Importing untrained model
2023-06-02 17:02:11,999:INFO:AdaBoost Regressor Imported successfully
2023-06-02 17:02:11,999:INFO:Starting cross validation
2023-06-02 17:02:12,000:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:12,659:INFO:Calculating mean and std
2023-06-02 17:02:12,660:INFO:Creating metrics dataframe
2023-06-02 17:02:12,720:INFO:Uploading results into container
2023-06-02 17:02:12,722:INFO:Uploading model into container now
2023-06-02 17:02:12,722:INFO:_master_model_container: 15
2023-06-02 17:02:12,722:INFO:_display_container: 2
2023-06-02 17:02:12,723:INFO:AdaBoostRegressor(random_state=351)
2023-06-02 17:02:12,723:INFO:create_model() successfully completed......................................
2023-06-02 17:02:12,876:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:12,876:INFO:Creating metrics dataframe
2023-06-02 17:02:12,882:INFO:Initializing Gradient Boosting Regressor
2023-06-02 17:02:12,882:INFO:Total runtime is 0.22081565062204997 minutes
2023-06-02 17:02:12,884:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:12,884:INFO:Initializing create_model()
2023-06-02 17:02:12,884:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:12,884:INFO:Checking exceptions
2023-06-02 17:02:12,884:INFO:Importing libraries
2023-06-02 17:02:12,884:INFO:Copying training dataset
2023-06-02 17:02:12,890:INFO:Defining folds
2023-06-02 17:02:12,891:INFO:Declaring metric variables
2023-06-02 17:02:12,891:INFO:Importing untrained model
2023-06-02 17:02:12,891:INFO:Gradient Boosting Regressor Imported successfully
2023-06-02 17:02:12,892:INFO:Starting cross validation
2023-06-02 17:02:12,893:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:14,244:INFO:Calculating mean and std
2023-06-02 17:02:14,247:INFO:Creating metrics dataframe
2023-06-02 17:02:14,310:INFO:Uploading results into container
2023-06-02 17:02:14,311:INFO:Uploading model into container now
2023-06-02 17:02:14,311:INFO:_master_model_container: 16
2023-06-02 17:02:14,312:INFO:_display_container: 2
2023-06-02 17:02:14,312:INFO:GradientBoostingRegressor(random_state=351)
2023-06-02 17:02:14,312:INFO:create_model() successfully completed......................................
2023-06-02 17:02:14,449:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:14,449:INFO:Creating metrics dataframe
2023-06-02 17:02:14,458:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 17:02:14,458:INFO:Total runtime is 0.2470810612042745 minutes
2023-06-02 17:02:14,459:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:14,459:INFO:Initializing create_model()
2023-06-02 17:02:14,459:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:14,459:INFO:Checking exceptions
2023-06-02 17:02:14,459:INFO:Importing libraries
2023-06-02 17:02:14,459:INFO:Copying training dataset
2023-06-02 17:02:14,463:INFO:Defining folds
2023-06-02 17:02:14,463:INFO:Declaring metric variables
2023-06-02 17:02:14,463:INFO:Importing untrained model
2023-06-02 17:02:14,464:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 17:02:14,464:INFO:Starting cross validation
2023-06-02 17:02:14,465:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:15,296:INFO:Calculating mean and std
2023-06-02 17:02:15,297:INFO:Creating metrics dataframe
2023-06-02 17:02:15,360:INFO:Uploading results into container
2023-06-02 17:02:15,361:INFO:Uploading model into container now
2023-06-02 17:02:15,361:INFO:_master_model_container: 17
2023-06-02 17:02:15,361:INFO:_display_container: 2
2023-06-02 17:02:15,362:INFO:LGBMRegressor(random_state=351)
2023-06-02 17:02:15,362:INFO:create_model() successfully completed......................................
2023-06-02 17:02:15,510:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:15,510:INFO:Creating metrics dataframe
2023-06-02 17:02:15,514:INFO:Initializing Dummy Regressor
2023-06-02 17:02:15,515:INFO:Total runtime is 0.26468421618143717 minutes
2023-06-02 17:02:15,515:INFO:SubProcess create_model() called ==================================
2023-06-02 17:02:15,515:INFO:Initializing create_model()
2023-06-02 17:02:15,515:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDC2F190>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:15,515:INFO:Checking exceptions
2023-06-02 17:02:15,515:INFO:Importing libraries
2023-06-02 17:02:15,516:INFO:Copying training dataset
2023-06-02 17:02:15,519:INFO:Defining folds
2023-06-02 17:02:15,519:INFO:Declaring metric variables
2023-06-02 17:02:15,519:INFO:Importing untrained model
2023-06-02 17:02:15,519:INFO:Dummy Regressor Imported successfully
2023-06-02 17:02:15,519:INFO:Starting cross validation
2023-06-02 17:02:15,520:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:02:16,071:INFO:Calculating mean and std
2023-06-02 17:02:16,072:INFO:Creating metrics dataframe
2023-06-02 17:02:16,129:INFO:Uploading results into container
2023-06-02 17:02:16,129:INFO:Uploading model into container now
2023-06-02 17:02:16,130:INFO:_master_model_container: 18
2023-06-02 17:02:16,130:INFO:_display_container: 2
2023-06-02 17:02:16,130:INFO:DummyRegressor()
2023-06-02 17:02:16,130:INFO:create_model() successfully completed......................................
2023-06-02 17:02:16,249:INFO:SubProcess create_model() end ==================================
2023-06-02 17:02:16,249:INFO:Creating metrics dataframe
2023-06-02 17:02:16,255:INFO:Initializing create_model()
2023-06-02 17:02:16,255:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D48099EAC0>, estimator=Ridge(random_state=351), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:02:16,255:INFO:Checking exceptions
2023-06-02 17:02:16,256:INFO:Importing libraries
2023-06-02 17:02:16,256:INFO:Copying training dataset
2023-06-02 17:02:16,259:INFO:Defining folds
2023-06-02 17:02:16,259:INFO:Declaring metric variables
2023-06-02 17:02:16,260:INFO:Importing untrained model
2023-06-02 17:02:16,260:INFO:Declaring custom model
2023-06-02 17:02:16,260:INFO:Ridge Regression Imported successfully
2023-06-02 17:02:16,261:INFO:Cross validation set to False
2023-06-02 17:02:16,261:INFO:Fitting Model
2023-06-02 17:02:16,317:INFO:Ridge(random_state=351)
2023-06-02 17:02:16,317:INFO:create_model() successfully completed......................................
2023-06-02 17:02:16,461:INFO:_master_model_container: 18
2023-06-02 17:02:16,461:INFO:_display_container: 2
2023-06-02 17:02:16,462:INFO:Ridge(random_state=351)
2023-06-02 17:02:16,462:INFO:compare_models() successfully completed......................................
2023-06-02 17:02:16,467:INFO:Initializing save_model()
2023-06-02 17:02:16,467:INFO:save_model(model=Ridge(random_state=351), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2023-06-02 17:02:16,467:INFO:Adding model into prep_pipe
2023-06-02 17:02:16,472:INFO:best_model.pkl saved in current working directory
2023-06-02 17:02:16,476:INFO:Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('trained_model', Ridge(random_state=351))])
2023-06-02 17:02:16,477:INFO:save_model() successfully completed......................................
2023-06-02 17:03:29,347:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:03:29,347:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:03:29,347:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:03:29,347:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:03:30,389:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 17:03:32,224:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 17:03:34,121:INFO:PyCaret RegressionExperiment
2023-06-02 17:03:34,128:INFO:Logging name: reg-default-name
2023-06-02 17:03:34,128:INFO:ML Usecase: MLUsecase.REGRESSION
2023-06-02 17:03:34,128:INFO:version 3.0.2
2023-06-02 17:03:34,128:INFO:Initializing setup()
2023-06-02 17:03:34,128:INFO:self.USI: 9ee6
2023-06-02 17:03:34,128:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'X', 'html_param', 'X_test', 'log_plots_param', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id', 'transform_target_param'}
2023-06-02 17:03:34,128:INFO:Checking environment
2023-06-02 17:03:34,128:INFO:python_version: 3.9.12
2023-06-02 17:03:34,128:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 17:03:34,128:INFO:machine: AMD64
2023-06-02 17:03:34,128:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 17:03:34,128:INFO:Memory: svmem(total=8345964544, available=1112903680, percent=86.7, used=7233060864, free=1112903680)
2023-06-02 17:03:34,128:INFO:Physical Core: 2
2023-06-02 17:03:34,128:INFO:Logical Core: 4
2023-06-02 17:03:34,128:INFO:Checking libraries
2023-06-02 17:03:34,128:INFO:System:
2023-06-02 17:03:34,128:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 17:03:34,128:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 17:03:34,128:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 17:03:34,128:INFO:PyCaret required dependencies:
2023-06-02 17:03:34,128:INFO:                 pip: 21.2.4
2023-06-02 17:03:34,128:INFO:          setuptools: 61.2.0
2023-06-02 17:03:34,128:INFO:             pycaret: 3.0.2
2023-06-02 17:03:34,128:INFO:             IPython: 8.2.0
2023-06-02 17:03:34,128:INFO:          ipywidgets: 7.6.5
2023-06-02 17:03:34,128:INFO:                tqdm: 4.64.0
2023-06-02 17:03:34,128:INFO:               numpy: 1.21.6
2023-06-02 17:03:34,128:INFO:              pandas: 1.4.2
2023-06-02 17:03:34,128:INFO:              jinja2: 2.11.3
2023-06-02 17:03:34,128:INFO:               scipy: 1.7.3
2023-06-02 17:03:34,128:INFO:              joblib: 1.2.0
2023-06-02 17:03:34,128:INFO:             sklearn: 1.0.2
2023-06-02 17:03:34,128:INFO:                pyod: 1.0.9
2023-06-02 17:03:34,128:INFO:            imblearn: 0.10.1
2023-06-02 17:03:34,128:INFO:   category_encoders: 2.6.1
2023-06-02 17:03:34,128:INFO:            lightgbm: 3.3.5
2023-06-02 17:03:34,128:INFO:               numba: 0.55.1
2023-06-02 17:03:34,128:INFO:            requests: 2.27.1
2023-06-02 17:03:34,128:INFO:          matplotlib: 3.5.1
2023-06-02 17:03:34,128:INFO:          scikitplot: 0.3.7
2023-06-02 17:03:34,128:INFO:         yellowbrick: 1.5
2023-06-02 17:03:34,128:INFO:              plotly: 5.6.0
2023-06-02 17:03:34,128:INFO:             kaleido: 0.2.1
2023-06-02 17:03:34,128:INFO:         statsmodels: 0.13.2
2023-06-02 17:03:34,128:INFO:              sktime: 0.17.0
2023-06-02 17:03:34,128:INFO:               tbats: 1.1.3
2023-06-02 17:03:34,128:INFO:            pmdarima: 2.0.3
2023-06-02 17:03:34,128:INFO:              psutil: 5.9.5
2023-06-02 17:03:34,128:INFO:PyCaret optional dependencies:
2023-06-02 17:03:34,128:INFO:                shap: Not installed
2023-06-02 17:03:34,128:INFO:           interpret: Not installed
2023-06-02 17:03:34,128:INFO:                umap: Not installed
2023-06-02 17:03:34,128:INFO:    pandas_profiling: 4.2.0
2023-06-02 17:03:34,128:INFO:  explainerdashboard: Not installed
2023-06-02 17:03:34,128:INFO:             autoviz: Not installed
2023-06-02 17:03:34,128:INFO:           fairlearn: Not installed
2023-06-02 17:03:34,128:INFO:             xgboost: Not installed
2023-06-02 17:03:34,128:INFO:            catboost: Not installed
2023-06-02 17:03:34,128:INFO:              kmodes: Not installed
2023-06-02 17:03:34,128:INFO:             mlxtend: Not installed
2023-06-02 17:03:34,128:INFO:       statsforecast: Not installed
2023-06-02 17:03:34,128:INFO:        tune_sklearn: Not installed
2023-06-02 17:03:34,128:INFO:                 ray: Not installed
2023-06-02 17:03:34,128:INFO:            hyperopt: Not installed
2023-06-02 17:03:34,128:INFO:              optuna: Not installed
2023-06-02 17:03:34,128:INFO:               skopt: Not installed
2023-06-02 17:03:34,128:INFO:              mlflow: Not installed
2023-06-02 17:03:34,128:INFO:              gradio: Not installed
2023-06-02 17:03:34,128:INFO:             fastapi: Not installed
2023-06-02 17:03:34,128:INFO:             uvicorn: Not installed
2023-06-02 17:03:34,128:INFO:              m2cgen: Not installed
2023-06-02 17:03:34,128:INFO:           evidently: Not installed
2023-06-02 17:03:34,128:INFO:               fugue: Not installed
2023-06-02 17:03:34,128:INFO:           streamlit: 1.23.1
2023-06-02 17:03:34,128:INFO:             prophet: Not installed
2023-06-02 17:03:34,128:INFO:None
2023-06-02 17:03:34,128:INFO:Set up data.
2023-06-02 17:03:34,137:INFO:Set up train/test split.
2023-06-02 17:03:34,140:INFO:Set up index.
2023-06-02 17:03:34,140:INFO:Set up folding strategy.
2023-06-02 17:03:34,140:INFO:Assigning column types.
2023-06-02 17:03:34,140:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 17:03:34,140:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,140:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,154:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,204:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,254:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,254:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,254:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,254:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,254:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,272:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,330:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,370:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,370:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,370:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2023-06-02 17:03:34,370:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,370:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,434:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,488:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,488:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,488:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,494:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,504:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,554:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,610:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,611:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,611:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,611:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2023-06-02 17:03:34,615:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,663:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,716:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,717:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,717:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,721:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,768:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,815:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,815:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,815:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,815:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2023-06-02 17:03:34,887:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,933:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:34,933:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,933:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:34,985:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:35,032:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:03:35,032:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,032:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 17:03:35,100:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:35,142:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,142:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,200:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2023-06-02 17:03:35,248:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,248:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,248:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2023-06-02 17:03:35,354:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,354:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,449:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,449:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,449:INFO:Preparing preprocessing pipeline...
2023-06-02 17:03:35,449:INFO:Set up simple imputation.
2023-06-02 17:03:35,471:INFO:Finished creating preprocessing pipeline.
2023-06-02 17:03:35,471:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))])
2023-06-02 17:03:35,471:INFO:Creating final display dataframe.
2023-06-02 17:03:35,522:INFO:Setup _display_container:                     Description             Value
0                    Session id              5735
1                        Target           Outcome
2                   Target type        Regression
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator             KFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  reg-default-name
18                          USI              9ee6
2023-06-02 17:03:35,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,753:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,753:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:03:35,753:INFO:setup() successfully completed in 1.67s...............
2023-06-02 17:03:35,753:INFO:Initializing compare_models()
2023-06-02 17:03:35,753:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2023-06-02 17:03:35,753:INFO:Checking exceptions
2023-06-02 17:03:35,753:INFO:Preparing display monitor
2023-06-02 17:03:35,767:INFO:Initializing Linear Regression
2023-06-02 17:03:35,767:INFO:Total runtime is 0.00023908615112304686 minutes
2023-06-02 17:03:35,767:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:35,767:INFO:Initializing create_model()
2023-06-02 17:03:35,767:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:35,767:INFO:Checking exceptions
2023-06-02 17:03:35,767:INFO:Importing libraries
2023-06-02 17:03:35,767:INFO:Copying training dataset
2023-06-02 17:03:35,770:INFO:Defining folds
2023-06-02 17:03:35,770:INFO:Declaring metric variables
2023-06-02 17:03:35,770:INFO:Importing untrained model
2023-06-02 17:03:35,771:INFO:Linear Regression Imported successfully
2023-06-02 17:03:35,771:INFO:Starting cross validation
2023-06-02 17:03:35,771:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:36,317:INFO:Calculating mean and std
2023-06-02 17:03:36,318:INFO:Creating metrics dataframe
2023-06-02 17:03:36,353:INFO:Uploading results into container
2023-06-02 17:03:36,353:INFO:Uploading model into container now
2023-06-02 17:03:36,353:INFO:_master_model_container: 1
2023-06-02 17:03:36,353:INFO:_display_container: 2
2023-06-02 17:03:36,353:INFO:LinearRegression(n_jobs=-1)
2023-06-02 17:03:36,353:INFO:create_model() successfully completed......................................
2023-06-02 17:03:36,463:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:36,463:INFO:Creating metrics dataframe
2023-06-02 17:03:36,463:INFO:Initializing Lasso Regression
2023-06-02 17:03:36,463:INFO:Total runtime is 0.011840089162190755 minutes
2023-06-02 17:03:36,463:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:36,463:INFO:Initializing create_model()
2023-06-02 17:03:36,463:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:36,463:INFO:Checking exceptions
2023-06-02 17:03:36,463:INFO:Importing libraries
2023-06-02 17:03:36,463:INFO:Copying training dataset
2023-06-02 17:03:36,463:INFO:Defining folds
2023-06-02 17:03:36,463:INFO:Declaring metric variables
2023-06-02 17:03:36,463:INFO:Importing untrained model
2023-06-02 17:03:36,463:INFO:Lasso Regression Imported successfully
2023-06-02 17:03:36,463:INFO:Starting cross validation
2023-06-02 17:03:36,463:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:37,102:INFO:Calculating mean and std
2023-06-02 17:03:37,104:INFO:Creating metrics dataframe
2023-06-02 17:03:37,156:INFO:Uploading results into container
2023-06-02 17:03:37,156:INFO:Uploading model into container now
2023-06-02 17:03:37,156:INFO:_master_model_container: 2
2023-06-02 17:03:37,156:INFO:_display_container: 2
2023-06-02 17:03:37,156:INFO:Lasso(random_state=5735)
2023-06-02 17:03:37,156:INFO:create_model() successfully completed......................................
2023-06-02 17:03:37,304:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:37,304:INFO:Creating metrics dataframe
2023-06-02 17:03:37,304:INFO:Initializing Ridge Regression
2023-06-02 17:03:37,304:INFO:Total runtime is 0.0258589506149292 minutes
2023-06-02 17:03:37,304:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:37,304:INFO:Initializing create_model()
2023-06-02 17:03:37,304:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:37,304:INFO:Checking exceptions
2023-06-02 17:03:37,304:INFO:Importing libraries
2023-06-02 17:03:37,304:INFO:Copying training dataset
2023-06-02 17:03:37,320:INFO:Defining folds
2023-06-02 17:03:37,320:INFO:Declaring metric variables
2023-06-02 17:03:37,320:INFO:Importing untrained model
2023-06-02 17:03:37,321:INFO:Ridge Regression Imported successfully
2023-06-02 17:03:37,322:INFO:Starting cross validation
2023-06-02 17:03:37,322:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:37,961:INFO:Calculating mean and std
2023-06-02 17:03:37,961:INFO:Creating metrics dataframe
2023-06-02 17:03:38,033:INFO:Uploading results into container
2023-06-02 17:03:38,034:INFO:Uploading model into container now
2023-06-02 17:03:38,035:INFO:_master_model_container: 3
2023-06-02 17:03:38,035:INFO:_display_container: 2
2023-06-02 17:03:38,036:INFO:Ridge(random_state=5735)
2023-06-02 17:03:38,036:INFO:create_model() successfully completed......................................
2023-06-02 17:03:38,205:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:38,206:INFO:Creating metrics dataframe
2023-06-02 17:03:38,212:INFO:Initializing Elastic Net
2023-06-02 17:03:38,212:INFO:Total runtime is 0.04098099867502848 minutes
2023-06-02 17:03:38,213:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:38,213:INFO:Initializing create_model()
2023-06-02 17:03:38,213:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:38,213:INFO:Checking exceptions
2023-06-02 17:03:38,214:INFO:Importing libraries
2023-06-02 17:03:38,214:INFO:Copying training dataset
2023-06-02 17:03:38,219:INFO:Defining folds
2023-06-02 17:03:38,219:INFO:Declaring metric variables
2023-06-02 17:03:38,220:INFO:Importing untrained model
2023-06-02 17:03:38,220:INFO:Elastic Net Imported successfully
2023-06-02 17:03:38,220:INFO:Starting cross validation
2023-06-02 17:03:38,220:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:38,817:INFO:Calculating mean and std
2023-06-02 17:03:38,817:INFO:Creating metrics dataframe
2023-06-02 17:03:38,902:INFO:Uploading results into container
2023-06-02 17:03:38,903:INFO:Uploading model into container now
2023-06-02 17:03:38,904:INFO:_master_model_container: 4
2023-06-02 17:03:38,904:INFO:_display_container: 2
2023-06-02 17:03:38,904:INFO:ElasticNet(random_state=5735)
2023-06-02 17:03:38,904:INFO:create_model() successfully completed......................................
2023-06-02 17:03:39,045:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:39,045:INFO:Creating metrics dataframe
2023-06-02 17:03:39,047:INFO:Initializing Least Angle Regression
2023-06-02 17:03:39,047:INFO:Total runtime is 0.05491096576054891 minutes
2023-06-02 17:03:39,047:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:39,047:INFO:Initializing create_model()
2023-06-02 17:03:39,047:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:39,047:INFO:Checking exceptions
2023-06-02 17:03:39,047:INFO:Importing libraries
2023-06-02 17:03:39,047:INFO:Copying training dataset
2023-06-02 17:03:39,047:INFO:Defining folds
2023-06-02 17:03:39,047:INFO:Declaring metric variables
2023-06-02 17:03:39,047:INFO:Importing untrained model
2023-06-02 17:03:39,047:INFO:Least Angle Regression Imported successfully
2023-06-02 17:03:39,047:INFO:Starting cross validation
2023-06-02 17:03:39,047:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:39,115:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,121:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,137:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,153:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,260:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,289:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,296:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,301:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,433:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,445:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), Lars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:39,737:INFO:Calculating mean and std
2023-06-02 17:03:39,738:INFO:Creating metrics dataframe
2023-06-02 17:03:39,831:INFO:Uploading results into container
2023-06-02 17:03:39,831:INFO:Uploading model into container now
2023-06-02 17:03:39,831:INFO:_master_model_container: 5
2023-06-02 17:03:39,831:INFO:_display_container: 2
2023-06-02 17:03:39,831:INFO:Lars(random_state=5735)
2023-06-02 17:03:39,831:INFO:create_model() successfully completed......................................
2023-06-02 17:03:39,969:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:39,969:INFO:Creating metrics dataframe
2023-06-02 17:03:39,985:INFO:Initializing Lasso Least Angle Regression
2023-06-02 17:03:39,985:INFO:Total runtime is 0.07053604125976562 minutes
2023-06-02 17:03:39,985:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:39,985:INFO:Initializing create_model()
2023-06-02 17:03:39,985:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:39,985:INFO:Checking exceptions
2023-06-02 17:03:39,985:INFO:Importing libraries
2023-06-02 17:03:39,985:INFO:Copying training dataset
2023-06-02 17:03:39,985:INFO:Defining folds
2023-06-02 17:03:39,985:INFO:Declaring metric variables
2023-06-02 17:03:39,985:INFO:Importing untrained model
2023-06-02 17:03:39,985:INFO:Lasso Least Angle Regression Imported successfully
2023-06-02 17:03:40,000:INFO:Starting cross validation
2023-06-02 17:03:40,000:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:40,048:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,071:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,103:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,108:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,237:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,248:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,369:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,385:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), LassoLars())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)

Set parameter alpha to: original_alpha * np.sqrt(n_samples). 
  warnings.warn(

2023-06-02 17:03:40,800:INFO:Calculating mean and std
2023-06-02 17:03:40,800:INFO:Creating metrics dataframe
2023-06-02 17:03:40,863:INFO:Uploading results into container
2023-06-02 17:03:40,863:INFO:Uploading model into container now
2023-06-02 17:03:40,863:INFO:_master_model_container: 6
2023-06-02 17:03:40,863:INFO:_display_container: 2
2023-06-02 17:03:40,863:INFO:LassoLars(random_state=5735)
2023-06-02 17:03:40,863:INFO:create_model() successfully completed......................................
2023-06-02 17:03:41,001:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:41,001:INFO:Creating metrics dataframe
2023-06-02 17:03:41,017:INFO:Initializing Orthogonal Matching Pursuit
2023-06-02 17:03:41,017:INFO:Total runtime is 0.08773111104965209 minutes
2023-06-02 17:03:41,017:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:41,017:INFO:Initializing create_model()
2023-06-02 17:03:41,017:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:41,017:INFO:Checking exceptions
2023-06-02 17:03:41,017:INFO:Importing libraries
2023-06-02 17:03:41,017:INFO:Copying training dataset
2023-06-02 17:03:41,032:INFO:Defining folds
2023-06-02 17:03:41,032:INFO:Declaring metric variables
2023-06-02 17:03:41,032:INFO:Importing untrained model
2023-06-02 17:03:41,032:INFO:Orthogonal Matching Pursuit Imported successfully
2023-06-02 17:03:41,032:INFO:Starting cross validation
2023-06-02 17:03:41,032:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:41,104:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,106:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,121:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,137:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,256:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,272:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,287:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,313:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,384:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,415:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_base.py:133: FutureWarning: The default of 'normalize' will be set to False in version 1.2 and deprecated in version 1.4.
If you wish to scale the data, use Pipeline with a StandardScaler in a preprocessing stage. To reproduce the previous behavior:

from sklearn.pipeline import make_pipeline

model = make_pipeline(StandardScaler(with_mean=False), OrthogonalMatchingPursuit())

If you wish to pass a sample_weight parameter, you need to pass it as a fit parameter to each step of the pipeline as follows:

kwargs = {s[0] + '__sample_weight': sample_weight for s in model.steps}
model.fit(X, y, **kwargs)


  warnings.warn(

2023-06-02 17:03:41,663:INFO:Calculating mean and std
2023-06-02 17:03:41,663:INFO:Creating metrics dataframe
2023-06-02 17:03:41,721:INFO:Uploading results into container
2023-06-02 17:03:41,721:INFO:Uploading model into container now
2023-06-02 17:03:41,721:INFO:_master_model_container: 7
2023-06-02 17:03:41,721:INFO:_display_container: 2
2023-06-02 17:03:41,721:INFO:OrthogonalMatchingPursuit()
2023-06-02 17:03:41,721:INFO:create_model() successfully completed......................................
2023-06-02 17:03:41,859:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:41,859:INFO:Creating metrics dataframe
2023-06-02 17:03:41,859:INFO:Initializing Bayesian Ridge
2023-06-02 17:03:41,859:INFO:Total runtime is 0.1017703334490458 minutes
2023-06-02 17:03:41,859:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:41,859:INFO:Initializing create_model()
2023-06-02 17:03:41,859:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:41,859:INFO:Checking exceptions
2023-06-02 17:03:41,859:INFO:Importing libraries
2023-06-02 17:03:41,859:INFO:Copying training dataset
2023-06-02 17:03:41,878:INFO:Defining folds
2023-06-02 17:03:41,878:INFO:Declaring metric variables
2023-06-02 17:03:41,878:INFO:Importing untrained model
2023-06-02 17:03:41,878:INFO:Bayesian Ridge Imported successfully
2023-06-02 17:03:41,878:INFO:Starting cross validation
2023-06-02 17:03:41,878:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:42,573:INFO:Calculating mean and std
2023-06-02 17:03:42,573:INFO:Creating metrics dataframe
2023-06-02 17:03:42,640:INFO:Uploading results into container
2023-06-02 17:03:42,648:INFO:Uploading model into container now
2023-06-02 17:03:42,649:INFO:_master_model_container: 8
2023-06-02 17:03:42,649:INFO:_display_container: 2
2023-06-02 17:03:42,649:INFO:BayesianRidge()
2023-06-02 17:03:42,650:INFO:create_model() successfully completed......................................
2023-06-02 17:03:42,800:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:42,800:INFO:Creating metrics dataframe
2023-06-02 17:03:42,804:INFO:Initializing Passive Aggressive Regressor
2023-06-02 17:03:42,804:INFO:Total runtime is 0.11752236286799111 minutes
2023-06-02 17:03:42,804:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:42,804:INFO:Initializing create_model()
2023-06-02 17:03:42,804:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:42,804:INFO:Checking exceptions
2023-06-02 17:03:42,804:INFO:Importing libraries
2023-06-02 17:03:42,804:INFO:Copying training dataset
2023-06-02 17:03:42,816:INFO:Defining folds
2023-06-02 17:03:42,816:INFO:Declaring metric variables
2023-06-02 17:03:42,816:INFO:Importing untrained model
2023-06-02 17:03:42,816:INFO:Passive Aggressive Regressor Imported successfully
2023-06-02 17:03:42,816:INFO:Starting cross validation
2023-06-02 17:03:42,816:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:43,640:INFO:Calculating mean and std
2023-06-02 17:03:43,641:INFO:Creating metrics dataframe
2023-06-02 17:03:43,714:INFO:Uploading results into container
2023-06-02 17:03:43,715:INFO:Uploading model into container now
2023-06-02 17:03:43,715:INFO:_master_model_container: 9
2023-06-02 17:03:43,715:INFO:_display_container: 2
2023-06-02 17:03:43,716:INFO:PassiveAggressiveRegressor(random_state=5735)
2023-06-02 17:03:43,716:INFO:create_model() successfully completed......................................
2023-06-02 17:03:43,862:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:43,862:INFO:Creating metrics dataframe
2023-06-02 17:03:43,866:INFO:Initializing Huber Regressor
2023-06-02 17:03:43,866:INFO:Total runtime is 0.1352232813835144 minutes
2023-06-02 17:03:43,866:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:43,866:INFO:Initializing create_model()
2023-06-02 17:03:43,866:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:43,866:INFO:Checking exceptions
2023-06-02 17:03:43,867:INFO:Importing libraries
2023-06-02 17:03:43,867:INFO:Copying training dataset
2023-06-02 17:03:43,870:INFO:Defining folds
2023-06-02 17:03:43,871:INFO:Declaring metric variables
2023-06-02 17:03:43,871:INFO:Importing untrained model
2023-06-02 17:03:43,872:INFO:Huber Regressor Imported successfully
2023-06-02 17:03:43,872:INFO:Starting cross validation
2023-06-02 17:03:43,873:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:43,988:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:43,993:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:43,997:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,002:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,284:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,298:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,376:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,600:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,616:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_huber.py:332: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2023-06-02 17:03:44,885:INFO:Calculating mean and std
2023-06-02 17:03:44,892:INFO:Creating metrics dataframe
2023-06-02 17:03:45,036:INFO:Uploading results into container
2023-06-02 17:03:45,039:INFO:Uploading model into container now
2023-06-02 17:03:45,040:INFO:_master_model_container: 10
2023-06-02 17:03:45,040:INFO:_display_container: 2
2023-06-02 17:03:45,040:INFO:HuberRegressor()
2023-06-02 17:03:45,040:INFO:create_model() successfully completed......................................
2023-06-02 17:03:45,227:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:45,227:INFO:Creating metrics dataframe
2023-06-02 17:03:45,234:INFO:Initializing K Neighbors Regressor
2023-06-02 17:03:45,234:INFO:Total runtime is 0.15801974137624103 minutes
2023-06-02 17:03:45,235:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:45,235:INFO:Initializing create_model()
2023-06-02 17:03:45,236:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:45,236:INFO:Checking exceptions
2023-06-02 17:03:45,236:INFO:Importing libraries
2023-06-02 17:03:45,236:INFO:Copying training dataset
2023-06-02 17:03:45,244:INFO:Defining folds
2023-06-02 17:03:45,244:INFO:Declaring metric variables
2023-06-02 17:03:45,245:INFO:Importing untrained model
2023-06-02 17:03:45,245:INFO:K Neighbors Regressor Imported successfully
2023-06-02 17:03:45,245:INFO:Starting cross validation
2023-06-02 17:03:45,248:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:46,328:INFO:Calculating mean and std
2023-06-02 17:03:46,329:INFO:Creating metrics dataframe
2023-06-02 17:03:46,402:INFO:Uploading results into container
2023-06-02 17:03:46,402:INFO:Uploading model into container now
2023-06-02 17:03:46,404:INFO:_master_model_container: 11
2023-06-02 17:03:46,404:INFO:_display_container: 2
2023-06-02 17:03:46,404:INFO:KNeighborsRegressor(n_jobs=-1)
2023-06-02 17:03:46,404:INFO:create_model() successfully completed......................................
2023-06-02 17:03:46,627:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:46,642:INFO:Creating metrics dataframe
2023-06-02 17:03:46,648:INFO:Initializing Decision Tree Regressor
2023-06-02 17:03:46,648:INFO:Total runtime is 0.18159509102503457 minutes
2023-06-02 17:03:46,648:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:46,649:INFO:Initializing create_model()
2023-06-02 17:03:46,649:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:46,649:INFO:Checking exceptions
2023-06-02 17:03:46,650:INFO:Importing libraries
2023-06-02 17:03:46,650:INFO:Copying training dataset
2023-06-02 17:03:46,659:INFO:Defining folds
2023-06-02 17:03:46,659:INFO:Declaring metric variables
2023-06-02 17:03:46,660:INFO:Importing untrained model
2023-06-02 17:03:46,660:INFO:Decision Tree Regressor Imported successfully
2023-06-02 17:03:46,660:INFO:Starting cross validation
2023-06-02 17:03:46,661:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:47,433:INFO:Calculating mean and std
2023-06-02 17:03:47,434:INFO:Creating metrics dataframe
2023-06-02 17:03:47,503:INFO:Uploading results into container
2023-06-02 17:03:47,503:INFO:Uploading model into container now
2023-06-02 17:03:47,505:INFO:_master_model_container: 12
2023-06-02 17:03:47,505:INFO:_display_container: 2
2023-06-02 17:03:47,506:INFO:DecisionTreeRegressor(random_state=5735)
2023-06-02 17:03:47,506:INFO:create_model() successfully completed......................................
2023-06-02 17:03:47,694:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:47,694:INFO:Creating metrics dataframe
2023-06-02 17:03:47,699:INFO:Initializing Random Forest Regressor
2023-06-02 17:03:47,699:INFO:Total runtime is 0.19911282459894813 minutes
2023-06-02 17:03:47,700:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:47,700:INFO:Initializing create_model()
2023-06-02 17:03:47,700:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:47,700:INFO:Checking exceptions
2023-06-02 17:03:47,700:INFO:Importing libraries
2023-06-02 17:03:47,700:INFO:Copying training dataset
2023-06-02 17:03:47,709:INFO:Defining folds
2023-06-02 17:03:47,710:INFO:Declaring metric variables
2023-06-02 17:03:47,710:INFO:Importing untrained model
2023-06-02 17:03:47,711:INFO:Random Forest Regressor Imported successfully
2023-06-02 17:03:47,711:INFO:Starting cross validation
2023-06-02 17:03:47,712:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:49,957:INFO:Calculating mean and std
2023-06-02 17:03:49,958:INFO:Creating metrics dataframe
2023-06-02 17:03:50,018:INFO:Uploading results into container
2023-06-02 17:03:50,019:INFO:Uploading model into container now
2023-06-02 17:03:50,019:INFO:_master_model_container: 13
2023-06-02 17:03:50,019:INFO:_display_container: 2
2023-06-02 17:03:50,021:INFO:RandomForestRegressor(n_jobs=-1, random_state=5735)
2023-06-02 17:03:50,021:INFO:create_model() successfully completed......................................
2023-06-02 17:03:50,202:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:50,203:INFO:Creating metrics dataframe
2023-06-02 17:03:50,212:INFO:Initializing Extra Trees Regressor
2023-06-02 17:03:50,212:INFO:Total runtime is 0.2409843802452087 minutes
2023-06-02 17:03:50,213:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:50,213:INFO:Initializing create_model()
2023-06-02 17:03:50,213:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:50,213:INFO:Checking exceptions
2023-06-02 17:03:50,213:INFO:Importing libraries
2023-06-02 17:03:50,213:INFO:Copying training dataset
2023-06-02 17:03:50,217:INFO:Defining folds
2023-06-02 17:03:50,218:INFO:Declaring metric variables
2023-06-02 17:03:50,218:INFO:Importing untrained model
2023-06-02 17:03:50,218:INFO:Extra Trees Regressor Imported successfully
2023-06-02 17:03:50,219:INFO:Starting cross validation
2023-06-02 17:03:50,220:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:52,283:INFO:Calculating mean and std
2023-06-02 17:03:52,284:INFO:Creating metrics dataframe
2023-06-02 17:03:52,352:INFO:Uploading results into container
2023-06-02 17:03:52,354:INFO:Uploading model into container now
2023-06-02 17:03:52,355:INFO:_master_model_container: 14
2023-06-02 17:03:52,355:INFO:_display_container: 2
2023-06-02 17:03:52,356:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=5735)
2023-06-02 17:03:52,356:INFO:create_model() successfully completed......................................
2023-06-02 17:03:52,518:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:52,518:INFO:Creating metrics dataframe
2023-06-02 17:03:52,526:INFO:Initializing AdaBoost Regressor
2023-06-02 17:03:52,526:INFO:Total runtime is 0.27954954306284585 minutes
2023-06-02 17:03:52,526:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:52,527:INFO:Initializing create_model()
2023-06-02 17:03:52,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:52,527:INFO:Checking exceptions
2023-06-02 17:03:52,527:INFO:Importing libraries
2023-06-02 17:03:52,527:INFO:Copying training dataset
2023-06-02 17:03:52,531:INFO:Defining folds
2023-06-02 17:03:52,531:INFO:Declaring metric variables
2023-06-02 17:03:52,531:INFO:Importing untrained model
2023-06-02 17:03:52,532:INFO:AdaBoost Regressor Imported successfully
2023-06-02 17:03:52,532:INFO:Starting cross validation
2023-06-02 17:03:52,533:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:53,600:INFO:Calculating mean and std
2023-06-02 17:03:53,601:INFO:Creating metrics dataframe
2023-06-02 17:03:53,763:INFO:Uploading results into container
2023-06-02 17:03:53,764:INFO:Uploading model into container now
2023-06-02 17:03:53,766:INFO:_master_model_container: 15
2023-06-02 17:03:53,766:INFO:_display_container: 2
2023-06-02 17:03:53,767:INFO:AdaBoostRegressor(random_state=5735)
2023-06-02 17:03:53,767:INFO:create_model() successfully completed......................................
2023-06-02 17:03:53,973:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:53,973:INFO:Creating metrics dataframe
2023-06-02 17:03:53,982:INFO:Initializing Gradient Boosting Regressor
2023-06-02 17:03:53,982:INFO:Total runtime is 0.3038147250811259 minutes
2023-06-02 17:03:53,983:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:53,983:INFO:Initializing create_model()
2023-06-02 17:03:53,983:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:53,983:INFO:Checking exceptions
2023-06-02 17:03:53,983:INFO:Importing libraries
2023-06-02 17:03:53,983:INFO:Copying training dataset
2023-06-02 17:03:53,990:INFO:Defining folds
2023-06-02 17:03:53,991:INFO:Declaring metric variables
2023-06-02 17:03:53,991:INFO:Importing untrained model
2023-06-02 17:03:53,991:INFO:Gradient Boosting Regressor Imported successfully
2023-06-02 17:03:53,991:INFO:Starting cross validation
2023-06-02 17:03:53,993:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:55,578:INFO:Calculating mean and std
2023-06-02 17:03:55,578:INFO:Creating metrics dataframe
2023-06-02 17:03:55,666:INFO:Uploading results into container
2023-06-02 17:03:55,667:INFO:Uploading model into container now
2023-06-02 17:03:55,668:INFO:_master_model_container: 16
2023-06-02 17:03:55,668:INFO:_display_container: 2
2023-06-02 17:03:55,668:INFO:GradientBoostingRegressor(random_state=5735)
2023-06-02 17:03:55,668:INFO:create_model() successfully completed......................................
2023-06-02 17:03:55,844:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:55,844:INFO:Creating metrics dataframe
2023-06-02 17:03:55,850:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 17:03:55,850:INFO:Total runtime is 0.3349581519762675 minutes
2023-06-02 17:03:55,851:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:55,851:INFO:Initializing create_model()
2023-06-02 17:03:55,851:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:55,851:INFO:Checking exceptions
2023-06-02 17:03:55,851:INFO:Importing libraries
2023-06-02 17:03:55,851:INFO:Copying training dataset
2023-06-02 17:03:55,857:INFO:Defining folds
2023-06-02 17:03:55,858:INFO:Declaring metric variables
2023-06-02 17:03:55,858:INFO:Importing untrained model
2023-06-02 17:03:55,858:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 17:03:55,858:INFO:Starting cross validation
2023-06-02 17:03:55,859:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:56,827:INFO:Calculating mean and std
2023-06-02 17:03:56,827:INFO:Creating metrics dataframe
2023-06-02 17:03:56,900:INFO:Uploading results into container
2023-06-02 17:03:56,901:INFO:Uploading model into container now
2023-06-02 17:03:56,901:INFO:_master_model_container: 17
2023-06-02 17:03:56,901:INFO:_display_container: 2
2023-06-02 17:03:56,901:INFO:LGBMRegressor(random_state=5735)
2023-06-02 17:03:56,902:INFO:create_model() successfully completed......................................
2023-06-02 17:03:57,045:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:57,045:INFO:Creating metrics dataframe
2023-06-02 17:03:57,051:INFO:Initializing Dummy Regressor
2023-06-02 17:03:57,051:INFO:Total runtime is 0.3549725890159607 minutes
2023-06-02 17:03:57,051:INFO:SubProcess create_model() called ==================================
2023-06-02 17:03:57,051:INFO:Initializing create_model()
2023-06-02 17:03:57,052:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FDBA6550>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:57,052:INFO:Checking exceptions
2023-06-02 17:03:57,052:INFO:Importing libraries
2023-06-02 17:03:57,052:INFO:Copying training dataset
2023-06-02 17:03:57,057:INFO:Defining folds
2023-06-02 17:03:57,057:INFO:Declaring metric variables
2023-06-02 17:03:57,057:INFO:Importing untrained model
2023-06-02 17:03:57,057:INFO:Dummy Regressor Imported successfully
2023-06-02 17:03:57,058:INFO:Starting cross validation
2023-06-02 17:03:57,058:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:03:57,827:INFO:Calculating mean and std
2023-06-02 17:03:57,828:INFO:Creating metrics dataframe
2023-06-02 17:03:57,915:INFO:Uploading results into container
2023-06-02 17:03:57,915:INFO:Uploading model into container now
2023-06-02 17:03:57,917:INFO:_master_model_container: 18
2023-06-02 17:03:57,917:INFO:_display_container: 2
2023-06-02 17:03:57,917:INFO:DummyRegressor()
2023-06-02 17:03:57,917:INFO:create_model() successfully completed......................................
2023-06-02 17:03:58,066:INFO:SubProcess create_model() end ==================================
2023-06-02 17:03:58,066:INFO:Creating metrics dataframe
2023-06-02 17:03:58,074:INFO:Initializing create_model()
2023-06-02 17:03:58,074:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D4809AD8B0>, estimator=LinearRegression(n_jobs=-1), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:03:58,074:INFO:Checking exceptions
2023-06-02 17:03:58,075:INFO:Importing libraries
2023-06-02 17:03:58,075:INFO:Copying training dataset
2023-06-02 17:03:58,078:INFO:Defining folds
2023-06-02 17:03:58,078:INFO:Declaring metric variables
2023-06-02 17:03:58,078:INFO:Importing untrained model
2023-06-02 17:03:58,078:INFO:Declaring custom model
2023-06-02 17:03:58,079:INFO:Linear Regression Imported successfully
2023-06-02 17:03:58,080:INFO:Cross validation set to False
2023-06-02 17:03:58,081:INFO:Fitting Model
2023-06-02 17:03:58,181:INFO:LinearRegression(n_jobs=-1)
2023-06-02 17:03:58,181:INFO:create_model() successfully completed......................................
2023-06-02 17:03:58,373:INFO:_master_model_container: 18
2023-06-02 17:03:58,375:INFO:_display_container: 2
2023-06-02 17:03:58,376:INFO:LinearRegression(n_jobs=-1)
2023-06-02 17:03:58,376:INFO:compare_models() successfully completed......................................
2023-06-02 17:03:58,385:INFO:Initializing save_model()
2023-06-02 17:03:58,385:INFO:save_model(model=LinearRegression(n_jobs=-1), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent')))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2023-06-02 17:03:58,385:INFO:Adding model into prep_pipe
2023-06-02 17:03:58,391:INFO:best_model.pkl saved in current working directory
2023-06-02 17:03:58,397:INFO:Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('trained_model', LinearRegression(n_jobs=-1))])
2023-06-02 17:03:58,397:INFO:save_model() successfully completed......................................
2023-06-02 17:06:21,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:06:21,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:06:21,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:06:21,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-06-02 17:06:22,551:WARNING:
'prophet' is a soft dependency and not included in the pycaret installation. Please run: `pip install prophet` to install.
2023-06-02 17:06:24,158:WARNING:e:\autoMLapp\app.py:6: DeprecationWarning: `import pandas_profiling` is going to be deprecated by April 1st. Please use `import ydata_profiling` instead.
  import pandas_profiling

2023-06-02 17:06:30,906:INFO:PyCaret ClassificationExperiment
2023-06-02 17:06:30,906:INFO:Logging name: clf-default-name
2023-06-02 17:06:30,906:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-06-02 17:06:30,906:INFO:version 3.0.2
2023-06-02 17:06:30,906:INFO:Initializing setup()
2023-06-02 17:06:30,906:INFO:self.USI: d8e0
2023-06-02 17:06:30,906:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'is_multiclass', 'X', 'html_param', 'X_test', 'log_plots_param', 'fix_imbalance', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id'}
2023-06-02 17:06:30,906:INFO:Checking environment
2023-06-02 17:06:30,906:INFO:python_version: 3.9.12
2023-06-02 17:06:30,906:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 17:06:30,906:INFO:machine: AMD64
2023-06-02 17:06:30,906:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 17:06:30,906:INFO:Memory: svmem(total=8345964544, available=1072861184, percent=87.1, used=7273103360, free=1072861184)
2023-06-02 17:06:30,906:INFO:Physical Core: 2
2023-06-02 17:06:30,906:INFO:Logical Core: 4
2023-06-02 17:06:30,906:INFO:Checking libraries
2023-06-02 17:06:30,921:INFO:System:
2023-06-02 17:06:30,921:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 17:06:30,921:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 17:06:30,921:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 17:06:30,921:INFO:PyCaret required dependencies:
2023-06-02 17:06:30,921:INFO:                 pip: 21.2.4
2023-06-02 17:06:30,921:INFO:          setuptools: 61.2.0
2023-06-02 17:06:30,921:INFO:             pycaret: 3.0.2
2023-06-02 17:06:30,921:INFO:             IPython: 8.2.0
2023-06-02 17:06:30,921:INFO:          ipywidgets: 7.6.5
2023-06-02 17:06:30,921:INFO:                tqdm: 4.64.0
2023-06-02 17:06:30,921:INFO:               numpy: 1.21.6
2023-06-02 17:06:30,921:INFO:              pandas: 1.4.2
2023-06-02 17:06:30,921:INFO:              jinja2: 2.11.3
2023-06-02 17:06:30,921:INFO:               scipy: 1.7.3
2023-06-02 17:06:30,921:INFO:              joblib: 1.2.0
2023-06-02 17:06:30,921:INFO:             sklearn: 1.0.2
2023-06-02 17:06:30,922:INFO:                pyod: 1.0.9
2023-06-02 17:06:30,922:INFO:            imblearn: 0.10.1
2023-06-02 17:06:30,922:INFO:   category_encoders: 2.6.1
2023-06-02 17:06:30,922:INFO:            lightgbm: 3.3.5
2023-06-02 17:06:30,922:INFO:               numba: 0.55.1
2023-06-02 17:06:30,922:INFO:            requests: 2.27.1
2023-06-02 17:06:30,922:INFO:          matplotlib: 3.5.1
2023-06-02 17:06:30,922:INFO:          scikitplot: 0.3.7
2023-06-02 17:06:30,922:INFO:         yellowbrick: 1.5
2023-06-02 17:06:30,922:INFO:              plotly: 5.6.0
2023-06-02 17:06:30,922:INFO:             kaleido: 0.2.1
2023-06-02 17:06:30,922:INFO:         statsmodels: 0.13.2
2023-06-02 17:06:30,922:INFO:              sktime: 0.17.0
2023-06-02 17:06:30,922:INFO:               tbats: 1.1.3
2023-06-02 17:06:30,922:INFO:            pmdarima: 2.0.3
2023-06-02 17:06:30,922:INFO:              psutil: 5.9.5
2023-06-02 17:06:30,922:INFO:PyCaret optional dependencies:
2023-06-02 17:06:30,922:INFO:                shap: Not installed
2023-06-02 17:06:30,922:INFO:           interpret: Not installed
2023-06-02 17:06:30,922:INFO:                umap: Not installed
2023-06-02 17:06:30,922:INFO:    pandas_profiling: 4.2.0
2023-06-02 17:06:30,922:INFO:  explainerdashboard: Not installed
2023-06-02 17:06:30,922:INFO:             autoviz: Not installed
2023-06-02 17:06:30,922:INFO:           fairlearn: Not installed
2023-06-02 17:06:30,922:INFO:             xgboost: Not installed
2023-06-02 17:06:30,922:INFO:            catboost: Not installed
2023-06-02 17:06:30,922:INFO:              kmodes: Not installed
2023-06-02 17:06:30,922:INFO:             mlxtend: Not installed
2023-06-02 17:06:30,922:INFO:       statsforecast: Not installed
2023-06-02 17:06:30,922:INFO:        tune_sklearn: Not installed
2023-06-02 17:06:30,922:INFO:                 ray: Not installed
2023-06-02 17:06:30,922:INFO:            hyperopt: Not installed
2023-06-02 17:06:30,922:INFO:              optuna: Not installed
2023-06-02 17:06:30,922:INFO:               skopt: Not installed
2023-06-02 17:06:30,922:INFO:              mlflow: Not installed
2023-06-02 17:06:30,922:INFO:              gradio: Not installed
2023-06-02 17:06:30,922:INFO:             fastapi: Not installed
2023-06-02 17:06:30,922:INFO:             uvicorn: Not installed
2023-06-02 17:06:30,922:INFO:              m2cgen: Not installed
2023-06-02 17:06:30,922:INFO:           evidently: Not installed
2023-06-02 17:06:30,922:INFO:               fugue: Not installed
2023-06-02 17:06:30,922:INFO:           streamlit: 1.23.1
2023-06-02 17:06:30,922:INFO:             prophet: Not installed
2023-06-02 17:06:30,922:INFO:None
2023-06-02 17:06:30,922:INFO:Set up data.
2023-06-02 17:06:30,922:INFO:Set up train/test split.
2023-06-02 17:06:30,930:INFO:Set up index.
2023-06-02 17:06:30,930:INFO:Set up folding strategy.
2023-06-02 17:06:30,930:INFO:Assigning column types.
2023-06-02 17:06:30,930:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 17:06:30,996:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,000:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,038:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,098:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,100:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,135:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 17:06:31,198:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,225:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,225:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,277:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:06:31,306:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,306:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,306:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-06-02 17:06:31,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,431:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,531:INFO:Preparing preprocessing pipeline...
2023-06-02 17:06:31,539:INFO:Set up simple imputation.
2023-06-02 17:06:31,568:INFO:Finished creating preprocessing pipeline.
2023-06-02 17:06:31,584:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose=0))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose=0)))],
         verbose=False)
2023-06-02 17:06:31,584:INFO:Creating final display dataframe.
2023-06-02 17:06:31,647:INFO:Setup _display_container:                     Description             Value
0                    Session id              3531
1                        Target           Outcome
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              d8e0
2023-06-02 17:06:31,737:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,737:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:06:31,831:INFO:setup() successfully completed in 1.0s...............
2023-06-02 17:06:31,831:INFO:Initializing compare_models()
2023-06-02 17:06:31,831:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-06-02 17:06:31,831:INFO:Checking exceptions
2023-06-02 17:06:31,831:INFO:Preparing display monitor
2023-06-02 17:06:31,849:INFO:Initializing Logistic Regression
2023-06-02 17:06:31,849:INFO:Total runtime is 0.0 minutes
2023-06-02 17:06:31,849:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:31,849:INFO:Initializing create_model()
2023-06-02 17:06:31,849:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:31,849:INFO:Checking exceptions
2023-06-02 17:06:31,849:INFO:Importing libraries
2023-06-02 17:06:31,849:INFO:Copying training dataset
2023-06-02 17:06:31,852:INFO:Defining folds
2023-06-02 17:06:31,852:INFO:Declaring metric variables
2023-06-02 17:06:31,853:INFO:Importing untrained model
2023-06-02 17:06:31,853:INFO:Logistic Regression Imported successfully
2023-06-02 17:06:31,853:INFO:Starting cross validation
2023-06-02 17:06:31,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:32,694:INFO:Calculating mean and std
2023-06-02 17:06:32,695:INFO:Creating metrics dataframe
2023-06-02 17:06:32,782:INFO:Uploading results into container
2023-06-02 17:06:32,783:INFO:Uploading model into container now
2023-06-02 17:06:32,783:INFO:_master_model_container: 1
2023-06-02 17:06:32,783:INFO:_display_container: 2
2023-06-02 17:06:32,784:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3531, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-02 17:06:32,784:INFO:create_model() successfully completed......................................
2023-06-02 17:06:32,949:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:32,950:INFO:Creating metrics dataframe
2023-06-02 17:06:32,955:INFO:Initializing K Neighbors Classifier
2023-06-02 17:06:32,955:INFO:Total runtime is 0.0184297243754069 minutes
2023-06-02 17:06:32,955:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:32,955:INFO:Initializing create_model()
2023-06-02 17:06:32,955:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:32,955:INFO:Checking exceptions
2023-06-02 17:06:32,956:INFO:Importing libraries
2023-06-02 17:06:32,956:INFO:Copying training dataset
2023-06-02 17:06:32,963:INFO:Defining folds
2023-06-02 17:06:32,964:INFO:Declaring metric variables
2023-06-02 17:06:32,964:INFO:Importing untrained model
2023-06-02 17:06:32,964:INFO:K Neighbors Classifier Imported successfully
2023-06-02 17:06:32,965:INFO:Starting cross validation
2023-06-02 17:06:32,966:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:33,863:INFO:Calculating mean and std
2023-06-02 17:06:33,865:INFO:Creating metrics dataframe
2023-06-02 17:06:33,947:INFO:Uploading results into container
2023-06-02 17:06:33,948:INFO:Uploading model into container now
2023-06-02 17:06:33,948:INFO:_master_model_container: 2
2023-06-02 17:06:33,948:INFO:_display_container: 2
2023-06-02 17:06:33,949:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-06-02 17:06:33,949:INFO:create_model() successfully completed......................................
2023-06-02 17:06:34,089:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:34,089:INFO:Creating metrics dataframe
2023-06-02 17:06:34,089:INFO:Initializing Naive Bayes
2023-06-02 17:06:34,089:INFO:Total runtime is 0.03733314275741577 minutes
2023-06-02 17:06:34,089:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:34,089:INFO:Initializing create_model()
2023-06-02 17:06:34,089:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:34,089:INFO:Checking exceptions
2023-06-02 17:06:34,089:INFO:Importing libraries
2023-06-02 17:06:34,089:INFO:Copying training dataset
2023-06-02 17:06:34,106:INFO:Defining folds
2023-06-02 17:06:34,106:INFO:Declaring metric variables
2023-06-02 17:06:34,106:INFO:Importing untrained model
2023-06-02 17:06:34,106:INFO:Naive Bayes Imported successfully
2023-06-02 17:06:34,106:INFO:Starting cross validation
2023-06-02 17:06:34,106:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:34,936:INFO:Calculating mean and std
2023-06-02 17:06:34,951:INFO:Creating metrics dataframe
2023-06-02 17:06:35,014:INFO:Uploading results into container
2023-06-02 17:06:35,014:INFO:Uploading model into container now
2023-06-02 17:06:35,014:INFO:_master_model_container: 3
2023-06-02 17:06:35,014:INFO:_display_container: 2
2023-06-02 17:06:35,014:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-06-02 17:06:35,014:INFO:create_model() successfully completed......................................
2023-06-02 17:06:35,168:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:35,168:INFO:Creating metrics dataframe
2023-06-02 17:06:35,178:INFO:Initializing Decision Tree Classifier
2023-06-02 17:06:35,178:INFO:Total runtime is 0.05548633734385172 minutes
2023-06-02 17:06:35,178:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:35,179:INFO:Initializing create_model()
2023-06-02 17:06:35,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:35,179:INFO:Checking exceptions
2023-06-02 17:06:35,180:INFO:Importing libraries
2023-06-02 17:06:35,180:INFO:Copying training dataset
2023-06-02 17:06:35,187:INFO:Defining folds
2023-06-02 17:06:35,188:INFO:Declaring metric variables
2023-06-02 17:06:35,188:INFO:Importing untrained model
2023-06-02 17:06:35,188:INFO:Decision Tree Classifier Imported successfully
2023-06-02 17:06:35,189:INFO:Starting cross validation
2023-06-02 17:06:35,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:35,811:WARNING:Summarize dataset:   0%|                                                          | 0/5 [00:00<?, ?it/s]
2023-06-02 17:06:35,881:WARNING:Summarize dataset:   0%|                        | 0/14 [00:00<?, ?it/s, Describe variable:SkinThickness]
2023-06-02 17:06:35,891:WARNING:Summarize dataset:   7%|#2                | 1/14 [00:00<00:01, 12.47it/s, Describe variable:Pregnancies]
2023-06-02 17:06:35,891:WARNING:Summarize dataset:  14%|##2             | 2/14 [00:00<00:00, 24.93it/s, Describe variable:BloodPressure]
2023-06-02 17:06:35,891:WARNING:Summarize dataset:  21%|####7                 | 3/14 [00:00<00:00, 37.40it/s, Describe variable:Glucose]
2023-06-02 17:06:35,919:WARNING:Summarize dataset:  29%|#######4                  | 4/14 [00:00<00:00, 37.17it/s, Describe variable:Age]
2023-06-02 17:06:35,922:WARNING:Summarize dataset:  36%|#########2                | 5/14 [00:00<00:00, 45.04it/s, Describe variable:Age]
2023-06-02 17:06:35,922:WARNING:Summarize dataset:  36%|#########2                | 5/14 [00:00<00:00, 45.04it/s, Describe variable:BMI]
2023-06-02 17:06:35,927:WARNING:Summarize dataset:  43%|#########4            | 6/14 [00:00<00:00, 45.04it/s, Describe variable:Insulin]
2023-06-02 17:06:35,960:WARNING:Summarize dataset:  50%|###########           | 7/14 [00:00<00:00, 45.04it/s, Describe variable:Outcome]
2023-06-02 17:06:35,963:WARNING:Summarize dataset:  57%|##8  | 8/14 [00:00<00:00, 45.04it/s, Describe variable:DiabetesPedigreeFunction]
2023-06-02 17:06:35,963:WARNING:Summarize dataset:  64%|##################6          | 9/14 [00:00<00:00, 45.04it/s, Get variable types]
2023-06-02 17:06:35,964:WARNING:Summarize dataset:  62%|############5       | 10/16 [00:00<00:00, 45.04it/s, Calculate auto correlation]
2023-06-02 17:06:36,090:WARNING:Summarize dataset:  69%|#############7      | 11/16 [00:00<00:00, 38.68it/s, Calculate auto correlation]
2023-06-02 17:06:36,090:WARNING:Summarize dataset:  69%|###################2        | 11/16 [00:00<00:00, 38.68it/s, Get scatter matrix]
2023-06-02 17:06:36,090:WARNING:Summarize dataset:  14%|#9            | 11/80 [00:00<00:01, 38.68it/s, scatter Pregnancies, Pregnancies]
2023-06-02 17:06:36,293:WARNING:Summarize dataset:  15%|##6               | 12/80 [00:00<00:01, 38.68it/s, scatter Glucose, Pregnancies]
2023-06-02 17:06:36,473:WARNING:Summarize dataset:  16%|#9          | 13/80 [00:00<00:01, 38.68it/s, scatter BloodPressure, Pregnancies]
2023-06-02 17:06:36,641:WARNING:Summarize dataset:  18%|##          | 14/80 [00:00<00:01, 38.68it/s, scatter SkinThickness, Pregnancies]
2023-06-02 17:06:36,806:WARNING:Summarize dataset:  19%|##2         | 15/80 [00:00<00:05, 12.00it/s, scatter SkinThickness, Pregnancies]
2023-06-02 17:06:36,806:WARNING:Summarize dataset:  19%|###3              | 15/80 [00:00<00:05, 12.00it/s, scatter Insulin, Pregnancies]
2023-06-02 17:06:36,973:WARNING:Summarize dataset:  20%|####4                 | 16/80 [00:01<00:05, 12.00it/s, scatter BMI, Pregnancies]
2023-06-02 17:06:37,175:WARNING:Summarize dataset:  21%|2| 17/80 [00:01<00:05, 12.00it/s, scatter DiabetesPedigreeFunction, Pregnancies]
2023-06-02 17:06:37,339:WARNING:Summarize dataset:  22%|2| 18/80 [00:01<00:06,  9.05it/s, scatter DiabetesPedigreeFunction, Pregnancies]
2023-06-02 17:06:37,339:WARNING:Summarize dataset:  22%|####9                 | 18/80 [00:01<00:06,  9.05it/s, scatter Age, Pregnancies]
2023-06-02 17:06:37,507:WARNING:Summarize dataset:  24%|####2             | 19/80 [00:01<00:06,  9.05it/s, scatter Pregnancies, Glucose]
2023-06-02 17:06:37,681:WARNING:Summarize dataset:  25%|####5             | 20/80 [00:01<00:07,  8.10it/s, scatter Pregnancies, Glucose]
2023-06-02 17:06:37,681:WARNING:Summarize dataset:  25%|#####5                | 20/80 [00:01<00:07,  8.10it/s, scatter Glucose, Glucose]
2023-06-02 17:06:37,839:WARNING:Summarize dataset:  26%|####2           | 21/80 [00:02<00:07,  8.10it/s, scatter BloodPressure, Glucose]
2023-06-02 17:06:38,022:WARNING:Summarize dataset:  28%|####4           | 22/80 [00:02<00:07,  7.44it/s, scatter BloodPressure, Glucose]
2023-06-02 17:06:38,022:WARNING:Summarize dataset:  28%|####4           | 22/80 [00:02<00:07,  7.44it/s, scatter SkinThickness, Glucose]
2023-06-02 17:06:38,172:WARNING:Summarize dataset:  29%|######3               | 23/80 [00:02<00:07,  7.44it/s, scatter Insulin, Glucose]
2023-06-02 17:06:38,305:WARNING:Summarize dataset:  30%|######6               | 24/80 [00:02<00:07,  7.34it/s, scatter Insulin, Glucose]
2023-06-02 17:06:38,305:WARNING:Summarize dataset:  30%|#######8                  | 24/80 [00:02<00:07,  7.34it/s, scatter BMI, Glucose]
2023-06-02 17:06:38,473:WARNING:Summarize dataset:  31%|########1                 | 25/80 [00:02<00:07,  7.09it/s, scatter BMI, Glucose]
2023-06-02 17:06:38,473:WARNING:Summarize dataset:  31%|#5   | 25/80 [00:02<00:07,  7.09it/s, scatter DiabetesPedigreeFunction, Glucose]
2023-06-02 17:06:38,672:WARNING:Summarize dataset:  32%|#6   | 26/80 [00:02<00:08,  6.60it/s, scatter DiabetesPedigreeFunction, Glucose]
2023-06-02 17:06:38,672:WARNING:Summarize dataset:  32%|########4                 | 26/80 [00:02<00:08,  6.60it/s, scatter Age, Glucose]
2023-06-02 17:06:38,857:WARNING:Summarize dataset:  34%|########7                 | 27/80 [00:03<00:08,  6.32it/s, scatter Age, Glucose]
2023-06-02 17:06:38,857:WARNING:Summarize dataset:  34%|####        | 27/80 [00:03<00:08,  6.32it/s, scatter Pregnancies, BloodPressure]
2023-06-02 17:06:38,907:INFO:Calculating mean and std
2023-06-02 17:06:38,907:INFO:Creating metrics dataframe
2023-06-02 17:06:39,039:WARNING:Summarize dataset:  35%|####1       | 28/80 [00:03<00:08,  6.11it/s, scatter Pregnancies, BloodPressure]
2023-06-02 17:06:39,039:WARNING:Summarize dataset:  35%|#####6          | 28/80 [00:03<00:08,  6.11it/s, scatter Glucose, BloodPressure]
2023-06-02 17:06:39,223:WARNING:Summarize dataset:  36%|#####8          | 29/80 [00:03<00:08,  5.94it/s, scatter Glucose, BloodPressure]
2023-06-02 17:06:39,223:WARNING:Summarize dataset:  36%|###6      | 29/80 [00:03<00:08,  5.94it/s, scatter BloodPressure, BloodPressure]
2023-06-02 17:06:39,391:WARNING:Summarize dataset:  38%|###7      | 30/80 [00:03<00:08,  5.94it/s, scatter BloodPressure, BloodPressure]
2023-06-02 17:06:39,391:WARNING:Summarize dataset:  38%|###7      | 30/80 [00:03<00:08,  5.94it/s, scatter SkinThickness, BloodPressure]
2023-06-02 17:06:39,425:INFO:Uploading results into container
2023-06-02 17:06:39,425:INFO:Uploading model into container now
2023-06-02 17:06:39,425:INFO:_master_model_container: 4
2023-06-02 17:06:39,425:INFO:_display_container: 2
2023-06-02 17:06:39,425:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=3531, splitter='best')
2023-06-02 17:06:39,425:INFO:create_model() successfully completed......................................
2023-06-02 17:06:39,606:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:39,606:INFO:Creating metrics dataframe
2023-06-02 17:06:39,606:INFO:Initializing SVM - Linear Kernel
2023-06-02 17:06:39,606:INFO:Total runtime is 0.12927817900975547 minutes
2023-06-02 17:06:39,606:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:39,606:INFO:Initializing create_model()
2023-06-02 17:06:39,606:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:39,606:INFO:Checking exceptions
2023-06-02 17:06:39,606:INFO:Importing libraries
2023-06-02 17:06:39,606:INFO:Copying training dataset
2023-06-02 17:06:39,623:INFO:Defining folds
2023-06-02 17:06:39,623:INFO:Declaring metric variables
2023-06-02 17:06:39,623:INFO:Importing untrained model
2023-06-02 17:06:39,623:INFO:SVM - Linear Kernel Imported successfully
2023-06-02 17:06:39,623:INFO:Starting cross validation
2023-06-02 17:06:39,623:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:39,756:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:39,756:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:39,775:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:39,890:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:39,924:WARNING:Summarize dataset:  39%|###8      | 31/80 [00:04<00:13,  3.75it/s, scatter SkinThickness, BloodPressure]
2023-06-02 17:06:39,924:WARNING:Summarize dataset:  39%|######2         | 31/80 [00:04<00:13,  3.75it/s, scatter Insulin, BloodPressure]
2023-06-02 17:06:39,957:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:39,990:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:40,023:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:40,139:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:40,188:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:40,190:WARNING:Summarize dataset:  40%|######4         | 32/80 [00:04<00:12,  3.75it/s, scatter Insulin, BloodPressure]
2023-06-02 17:06:40,190:WARNING:Summarize dataset:  40%|########            | 32/80 [00:04<00:12,  3.75it/s, scatter BMI, BloodPressure]
2023-06-02 17:06:40,389:WARNING:Summarize dataset:  41%|########2           | 33/80 [00:04<00:11,  4.04it/s, scatter BMI, BloodPressure]
2023-06-02 17:06:40,389:WARNING:Summarize dataset:  41%|4| 33/80 [00:04<00:11,  4.04it/s, scatter DiabetesPedigreeFunction, BloodPressur
2023-06-02 17:06:40,556:WARNING:Summarize dataset:  42%|4| 34/80 [00:04<00:10,  4.46it/s, scatter DiabetesPedigreeFunction, BloodPressur
2023-06-02 17:06:40,556:WARNING:Summarize dataset:  42%|########5           | 34/80 [00:04<00:10,  4.46it/s, scatter Age, BloodPressure]
2023-06-02 17:06:40,721:WARNING:Summarize dataset:  44%|########7           | 35/80 [00:04<00:09,  4.83it/s, scatter Age, BloodPressure]
2023-06-02 17:06:40,721:WARNING:Summarize dataset:  44%|#####2      | 35/80 [00:04<00:09,  4.83it/s, scatter Pregnancies, SkinThickness]
2023-06-02 17:06:40,857:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:06:40,938:WARNING:Summarize dataset:  45%|#####4      | 36/80 [00:05<00:09,  4.77it/s, scatter Pregnancies, SkinThickness]
2023-06-02 17:06:40,938:WARNING:Summarize dataset:  45%|#######2        | 36/80 [00:05<00:09,  4.77it/s, scatter Glucose, SkinThickness]
2023-06-02 17:06:41,104:WARNING:Summarize dataset:  46%|#######4        | 37/80 [00:05<00:08,  5.08it/s, scatter Glucose, SkinThickness]
2023-06-02 17:06:41,105:WARNING:Summarize dataset:  46%|####6     | 37/80 [00:05<00:08,  5.08it/s, scatter BloodPressure, SkinThickness]
2023-06-02 17:06:41,239:WARNING:Summarize dataset:  48%|####7     | 38/80 [00:05<00:07,  5.60it/s, scatter BloodPressure, SkinThickness]
2023-06-02 17:06:41,239:WARNING:Summarize dataset:  48%|####7     | 38/80 [00:05<00:07,  5.60it/s, scatter SkinThickness, SkinThickness]
2023-06-02 17:06:41,388:WARNING:Summarize dataset:  49%|####8     | 39/80 [00:05<00:06,  5.89it/s, scatter SkinThickness, SkinThickness]
2023-06-02 17:06:41,388:WARNING:Summarize dataset:  49%|#######8        | 39/80 [00:05<00:06,  5.89it/s, scatter Insulin, SkinThickness]
2023-06-02 17:06:41,539:WARNING:Summarize dataset:  50%|########        | 40/80 [00:05<00:06,  6.09it/s, scatter Insulin, SkinThickness]
2023-06-02 17:06:41,539:WARNING:Summarize dataset:  50%|##########          | 40/80 [00:05<00:06,  6.09it/s, scatter BMI, SkinThickness]
2023-06-02 17:06:41,689:WARNING:Summarize dataset:  51%|##########2         | 41/80 [00:05<00:06,  6.26it/s, scatter BMI, SkinThickness]
2023-06-02 17:06:41,689:WARNING:Summarize dataset:  51%|5| 41/80 [00:05<00:06,  6.26it/s, scatter DiabetesPedigreeFunction, SkinThicknes
2023-06-02 17:06:41,839:WARNING:Summarize dataset:  52%|5| 42/80 [00:06<00:05,  6.37it/s, scatter DiabetesPedigreeFunction, SkinThicknes
2023-06-02 17:06:41,854:WARNING:Summarize dataset:  52%|##########5         | 42/80 [00:06<00:05,  6.37it/s, scatter Age, SkinThickness]
2023-06-02 17:06:42,006:WARNING:Summarize dataset:  54%|##########7         | 43/80 [00:06<00:05,  6.25it/s, scatter Age, SkinThickness]
2023-06-02 17:06:42,006:WARNING:Summarize dataset:  54%|#########6        | 43/80 [00:06<00:05,  6.25it/s, scatter Pregnancies, Insulin]
2023-06-02 17:06:42,156:WARNING:Summarize dataset:  55%|#########9        | 44/80 [00:06<00:05,  6.37it/s, scatter Pregnancies, Insulin]
2023-06-02 17:06:42,156:WARNING:Summarize dataset:  55%|############1         | 44/80 [00:06<00:05,  6.37it/s, scatter Glucose, Insulin]
2023-06-02 17:06:42,356:WARNING:Summarize dataset:  56%|############3         | 45/80 [00:06<00:05,  5.89it/s, scatter Glucose, Insulin]
2023-06-02 17:06:42,356:WARNING:Summarize dataset:  56%|#########       | 45/80 [00:06<00:05,  5.89it/s, scatter BloodPressure, Insulin]
2023-06-02 17:06:42,520:WARNING:Summarize dataset:  57%|#########2      | 46/80 [00:06<00:05,  5.95it/s, scatter BloodPressure, Insulin]
2023-06-02 17:06:42,521:WARNING:Summarize dataset:  57%|#########2      | 46/80 [00:06<00:05,  5.95it/s, scatter SkinThickness, Insulin]
2023-06-02 17:06:42,673:WARNING:Summarize dataset:  59%|#########4      | 47/80 [00:06<00:05,  6.11it/s, scatter SkinThickness, Insulin]
2023-06-02 17:06:42,673:WARNING:Summarize dataset:  59%|############9         | 47/80 [00:06<00:05,  6.11it/s, scatter Insulin, Insulin]
2023-06-02 17:06:42,806:WARNING:Summarize dataset:  60%|#############2        | 48/80 [00:06<00:04,  6.48it/s, scatter Insulin, Insulin]
2023-06-02 17:06:42,806:WARNING:Summarize dataset:  60%|###############6          | 48/80 [00:06<00:04,  6.48it/s, scatter BMI, Insulin]
2023-06-02 17:06:42,986:WARNING:Summarize dataset:  61%|###############9          | 49/80 [00:07<00:04,  6.31it/s, scatter BMI, Insulin]
2023-06-02 17:06:42,986:WARNING:Summarize dataset:  61%|###  | 49/80 [00:07<00:04,  6.31it/s, scatter DiabetesPedigreeFunction, Insulin]
2023-06-02 17:06:43,139:WARNING:Summarize dataset:  62%|###1 | 50/80 [00:07<00:04,  6.23it/s, scatter DiabetesPedigreeFunction, Insulin]
2023-06-02 17:06:43,139:WARNING:Summarize dataset:  62%|################2         | 50/80 [00:07<00:04,  6.23it/s, scatter Age, Insulin]
2023-06-02 17:06:43,307:WARNING:Summarize dataset:  64%|################5         | 51/80 [00:07<00:04,  6.14it/s, scatter Age, Insulin]
2023-06-02 17:06:43,307:WARNING:Summarize dataset:  64%|##############        | 51/80 [00:07<00:04,  6.14it/s, scatter Pregnancies, BMI]
2023-06-02 17:06:43,506:WARNING:Summarize dataset:  65%|##############3       | 52/80 [00:07<00:04,  5.76it/s, scatter Pregnancies, BMI]
2023-06-02 17:06:43,506:WARNING:Summarize dataset:  65%|################9         | 52/80 [00:07<00:04,  5.76it/s, scatter Glucose, BMI]
2023-06-02 17:06:43,705:WARNING:Summarize dataset:  66%|#################2        | 53/80 [00:07<00:04,  5.52it/s, scatter Glucose, BMI]
2023-06-02 17:06:43,705:WARNING:Summarize dataset:  66%|#############2      | 53/80 [00:07<00:04,  5.52it/s, scatter BloodPressure, BMI]
2023-06-02 17:06:43,871:WARNING:Summarize dataset:  68%|#############5      | 54/80 [00:08<00:04,  5.66it/s, scatter BloodPressure, BMI]
2023-06-02 17:06:43,871:WARNING:Summarize dataset:  68%|#############5      | 54/80 [00:08<00:04,  5.66it/s, scatter SkinThickness, BMI]
2023-06-02 17:06:44,022:WARNING:Summarize dataset:  69%|#############7      | 55/80 [00:08<00:04,  5.92it/s, scatter SkinThickness, BMI]
2023-06-02 17:06:44,022:WARNING:Summarize dataset:  69%|#################8        | 55/80 [00:08<00:04,  5.92it/s, scatter Insulin, BMI]
2023-06-02 17:06:44,204:WARNING:Summarize dataset:  70%|##################2       | 56/80 [00:08<00:04,  5.78it/s, scatter Insulin, BMI]
2023-06-02 17:06:44,204:WARNING:Summarize dataset:  70%|#####################         | 56/80 [00:08<00:04,  5.78it/s, scatter BMI, BMI]
2023-06-02 17:06:44,389:WARNING:Summarize dataset:  71%|#####################3        | 57/80 [00:08<00:04,  5.66it/s, scatter BMI, BMI]
2023-06-02 17:06:44,389:WARNING:Summarize dataset:  71%|######4  | 57/80 [00:08<00:04,  5.66it/s, scatter DiabetesPedigreeFunction, BMI]
2023-06-02 17:06:44,589:WARNING:Summarize dataset:  72%|######5  | 58/80 [00:08<00:04,  5.45it/s, scatter DiabetesPedigreeFunction, BMI]
2023-06-02 17:06:44,589:WARNING:Summarize dataset:  72%|#####################7        | 58/80 [00:08<00:04,  5.45it/s, scatter Age, BMI]
2023-06-02 17:06:44,772:WARNING:Summarize dataset:  74%|######################1       | 59/80 [00:08<00:03,  5.45it/s, scatter Age, BMI]
2023-06-02 17:06:44,772:WARNING:Summarize dataset:  74%|7| 59/80 [00:08<00:03,  5.45it/s, scatter Pregnancies, DiabetesPedigreeFunction]
2023-06-02 17:06:44,953:WARNING:Summarize dataset:  75%|7| 60/80 [00:09<00:03,  5.48it/s, scatter Pregnancies, DiabetesPedigreeFunction]
2023-06-02 17:06:44,953:WARNING:Summarize dataset:  75%|###7 | 60/80 [00:09<00:03,  5.48it/s, scatter Glucose, DiabetesPedigreeFunction]
2023-06-02 17:06:45,119:WARNING:Summarize dataset:  76%|###8 | 61/80 [00:09<00:03,  5.62it/s, scatter Glucose, DiabetesPedigreeFunction]
2023-06-02 17:06:45,120:WARNING:Summarize dataset:  76%|7| 61/80 [00:09<00:03,  5.62it/s, scatter BloodPressure, DiabetesPedigreeFunctio
2023-06-02 17:06:45,288:WARNING:Summarize dataset:  78%|7| 62/80 [00:09<00:03,  5.71it/s, scatter BloodPressure, DiabetesPedigreeFunctio
2023-06-02 17:06:45,288:WARNING:Summarize dataset:  78%|7| 62/80 [00:09<00:03,  5.71it/s, scatter SkinThickness, DiabetesPedigreeFunctio
2023-06-02 17:06:45,439:WARNING:Summarize dataset:  79%|7| 63/80 [00:09<00:02,  5.96it/s, scatter SkinThickness, DiabetesPedigreeFunctio
2023-06-02 17:06:45,439:WARNING:Summarize dataset:  79%|###9 | 63/80 [00:09<00:02,  5.96it/s, scatter Insulin, DiabetesPedigreeFunction]
2023-06-02 17:06:45,605:WARNING:Summarize dataset:  80%|#### | 64/80 [00:09<00:02,  5.98it/s, scatter Insulin, DiabetesPedigreeFunction]
2023-06-02 17:06:45,605:WARNING:Summarize dataset:  80%|#######2 | 64/80 [00:09<00:02,  5.98it/s, scatter BMI, DiabetesPedigreeFunction]
2023-06-02 17:06:45,805:WARNING:Summarize dataset:  81%|#######3 | 65/80 [00:09<00:02,  5.65it/s, scatter BMI, DiabetesPedigreeFunction]
2023-06-02 17:06:45,805:WARNING:Summarize dataset:  81%|8| 65/80 [00:09<00:02,  5.65it/s, scatter DiabetesPedigreeFunction, DiabetesPedi
2023-06-02 17:06:45,989:WARNING:Summarize dataset:  82%|8| 66/80 [00:10<00:02,  5.58it/s, scatter DiabetesPedigreeFunction, DiabetesPedi
2023-06-02 17:06:45,989:WARNING:Summarize dataset:  82%|#######4 | 66/80 [00:10<00:02,  5.58it/s, scatter Age, DiabetesPedigreeFunction]
2023-06-02 17:06:46,123:WARNING:Summarize dataset:  84%|#######5 | 67/80 [00:10<00:02,  6.04it/s, scatter Age, DiabetesPedigreeFunction]
2023-06-02 17:06:46,123:WARNING:Summarize dataset:  84%|##################4   | 67/80 [00:10<00:02,  6.04it/s, scatter Pregnancies, Age]
2023-06-02 17:06:46,573:WARNING:Summarize dataset:  85%|##################7   | 68/80 [00:10<00:03,  3.99it/s, scatter Pregnancies, Age]
2023-06-02 17:06:46,573:WARNING:Summarize dataset:  85%|######################    | 68/80 [00:10<00:03,  3.99it/s, scatter Glucose, Age]
2023-06-02 17:06:46,741:WARNING:Summarize dataset:  86%|######################4   | 69/80 [00:10<00:02,  4.43it/s, scatter Glucose, Age]
2023-06-02 17:06:46,741:WARNING:Summarize dataset:  86%|#################2  | 69/80 [00:10<00:02,  4.43it/s, scatter BloodPressure, Age]
2023-06-02 17:06:46,904:WARNING:Summarize dataset:  88%|#################5  | 70/80 [00:11<00:02,  4.83it/s, scatter BloodPressure, Age]
2023-06-02 17:06:46,905:WARNING:Summarize dataset:  88%|#################5  | 70/80 [00:11<00:02,  4.83it/s, scatter SkinThickness, Age]
2023-06-02 17:06:46,922:INFO:Calculating mean and std
2023-06-02 17:06:46,922:INFO:Creating metrics dataframe
2023-06-02 17:06:47,056:WARNING:Summarize dataset:  89%|#################7  | 71/80 [00:11<00:01,  5.24it/s, scatter SkinThickness, Age]
2023-06-02 17:06:47,056:WARNING:Summarize dataset:  89%|#######################   | 71/80 [00:11<00:01,  5.24it/s, scatter Insulin, Age]
2023-06-02 17:06:47,222:WARNING:Summarize dataset:  90%|#######################4  | 72/80 [00:11<00:01,  5.46it/s, scatter Insulin, Age]
2023-06-02 17:06:47,222:WARNING:Summarize dataset:  90%|###########################   | 72/80 [00:11<00:01,  5.46it/s, scatter BMI, Age]
2023-06-02 17:06:47,390:WARNING:Summarize dataset:  91%|###########################3  | 73/80 [00:11<00:01,  5.60it/s, scatter BMI, Age]
2023-06-02 17:06:47,390:WARNING:Summarize dataset:  91%|########2| 73/80 [00:11<00:01,  5.60it/s, scatter DiabetesPedigreeFunction, Age]
2023-06-02 17:06:47,542:INFO:Uploading results into container
2023-06-02 17:06:47,542:INFO:Uploading model into container now
2023-06-02 17:06:47,542:INFO:_master_model_container: 5
2023-06-02 17:06:47,542:INFO:_display_container: 2
2023-06-02 17:06:47,542:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3531, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-06-02 17:06:47,542:INFO:create_model() successfully completed......................................
2023-06-02 17:06:47,692:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:47,692:INFO:Creating metrics dataframe
2023-06-02 17:06:47,706:INFO:Initializing Ridge Classifier
2023-06-02 17:06:47,706:INFO:Total runtime is 0.2642856399218242 minutes
2023-06-02 17:06:47,706:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:47,706:INFO:Initializing create_model()
2023-06-02 17:06:47,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:47,706:INFO:Checking exceptions
2023-06-02 17:06:47,706:INFO:Importing libraries
2023-06-02 17:06:47,706:INFO:Copying training dataset
2023-06-02 17:06:47,706:INFO:Defining folds
2023-06-02 17:06:47,706:INFO:Declaring metric variables
2023-06-02 17:06:47,706:INFO:Importing untrained model
2023-06-02 17:06:47,706:INFO:Ridge Classifier Imported successfully
2023-06-02 17:06:47,706:INFO:Starting cross validation
2023-06-02 17:06:47,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:06:47,723:WARNING:Summarize dataset:  92%|########3| 74/80 [00:11<00:01,  4.45it/s, scatter DiabetesPedigreeFunction, Age]
2023-06-02 17:06:47,723:WARNING:Summarize dataset:  92%|###########################7  | 74/80 [00:11<00:01,  4.45it/s, scatter Age, Age]
2023-06-02 17:06:47,857:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:47,857:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:47,872:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:47,905:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:48,072:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:48,072:WARNING:Summarize dataset:  94%|############################1 | 75/80 [00:12<00:01,  3.81it/s, scatter Age, Age]
2023-06-02 17:06:48,143:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:48,188:WARNING:Summarize dataset:  95%|####################9 | 76/80 [00:12<00:00,  4.58it/s, Get dataframe statistics]
2023-06-02 17:06:48,188:WARNING:Summarize dataset:  93%|#########################  | 76/82 [00:12<00:01,  4.58it/s, Missing diagram bar]
2023-06-02 17:06:48,224:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:48,346:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:06:48,556:WARNING:Summarize dataset:  94%|#########################3 | 77/82 [00:12<00:01,  3.80it/s, Missing diagram bar]
2023-06-02 17:06:48,556:WARNING:Summarize dataset:  94%|######################5 | 77/82 [00:12<00:01,  3.80it/s, Missing diagram matrix]
2023-06-02 17:06:48,673:WARNING:Summarize dataset:  95%|######################8 | 78/82 [00:12<00:00,  4.56it/s, Missing diagram matrix]
2023-06-02 17:06:48,673:WARNING:Summarize dataset:  95%|#################################2 | 78/82 [00:12<00:00,  4.56it/s, Take sample]
2023-06-02 17:06:48,673:WARNING:Summarize dataset:  96%|######################### | 79/82 [00:12<00:00,  4.56it/s, Detecting duplicates]
2023-06-02 17:06:48,689:WARNING:Summarize dataset:  98%|###################################1| 80/82 [00:12<00:00,  4.56it/s, Get alerts]
2023-06-02 17:06:48,689:WARNING:Summarize dataset:  99%|#####################7| 81/82 [00:12<00:00,  4.56it/s, Get reproduction details]
2023-06-02 17:06:48,689:WARNING:Summarize dataset: 100%|#####################################| 82/82 [00:12<00:00,  4.56it/s, Completed]
2023-06-02 17:06:48,689:WARNING:Summarize dataset: 100%|#####################################| 82/82 [00:12<00:00,  6.37it/s, Completed]
2023-06-02 17:06:48,689:WARNING:
2023-06-02 17:06:48,689:WARNING:
2023-06-02 17:06:48,689:WARNING:Generate report structure:   0%|                                                  | 0/1 [00:00<?, ?it/s]
2023-06-02 17:06:48,689:WARNING:[A
2023-06-02 17:06:52,122:WARNING:
2023-06-02 17:06:52,122:WARNING:Generate report structure: 100%|##########################################| 1/1 [00:03<00:00,  3.43s/it]
2023-06-02 17:06:52,122:WARNING:[A
2023-06-02 17:06:52,122:WARNING:Generate report structure: 100%|##########################################| 1/1 [00:03<00:00,  3.43s/it]
2023-06-02 17:06:52,122:WARNING:
2023-06-02 17:06:52,122:WARNING:
2023-06-02 17:06:52,122:WARNING:Render HTML:   0%|                                                                | 0/1 [00:00<?, ?it/s]
2023-06-02 17:06:52,122:WARNING:[A
2023-06-02 17:06:55,889:WARNING:
2023-06-02 17:06:55,889:WARNING:Render HTML: 100%|########################################################| 1/1 [00:03<00:00,  3.77s/it]
2023-06-02 17:06:55,889:WARNING:[A
2023-06-02 17:06:55,889:WARNING:Render HTML: 100%|########################################################| 1/1 [00:03<00:00,  3.77s/it]
2023-06-02 17:06:55,904:WARNING:
2023-06-02 17:06:56,306:INFO:Calculating mean and std
2023-06-02 17:06:56,306:INFO:Creating metrics dataframe
2023-06-02 17:06:56,457:INFO:Uploading results into container
2023-06-02 17:06:56,457:INFO:Uploading model into container now
2023-06-02 17:06:56,457:INFO:_master_model_container: 6
2023-06-02 17:06:56,457:INFO:_display_container: 2
2023-06-02 17:06:56,457:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, normalize='deprecated', positive=False,
                random_state=3531, solver='auto', tol=0.001)
2023-06-02 17:06:56,457:INFO:create_model() successfully completed......................................
2023-06-02 17:06:56,604:INFO:SubProcess create_model() end ==================================
2023-06-02 17:06:56,604:INFO:Creating metrics dataframe
2023-06-02 17:06:56,604:INFO:Initializing Random Forest Classifier
2023-06-02 17:06:56,604:INFO:Total runtime is 0.4125905354817709 minutes
2023-06-02 17:06:56,604:INFO:SubProcess create_model() called ==================================
2023-06-02 17:06:56,604:INFO:Initializing create_model()
2023-06-02 17:06:56,604:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:06:56,604:INFO:Checking exceptions
2023-06-02 17:06:56,604:INFO:Importing libraries
2023-06-02 17:06:56,620:INFO:Copying training dataset
2023-06-02 17:06:56,622:INFO:Defining folds
2023-06-02 17:06:56,622:INFO:Declaring metric variables
2023-06-02 17:06:56,622:INFO:Importing untrained model
2023-06-02 17:06:56,622:INFO:Random Forest Classifier Imported successfully
2023-06-02 17:06:56,622:INFO:Starting cross validation
2023-06-02 17:06:56,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:00,403:INFO:Calculating mean and std
2023-06-02 17:07:00,404:INFO:Creating metrics dataframe
2023-06-02 17:07:00,495:INFO:Uploading results into container
2023-06-02 17:07:00,495:INFO:Uploading model into container now
2023-06-02 17:07:00,497:INFO:_master_model_container: 7
2023-06-02 17:07:00,497:INFO:_display_container: 2
2023-06-02 17:07:00,497:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='auto',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=3531, verbose=0, warm_start=False)
2023-06-02 17:07:00,497:INFO:create_model() successfully completed......................................
2023-06-02 17:07:00,643:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:00,643:INFO:Creating metrics dataframe
2023-06-02 17:07:00,648:INFO:Initializing Quadratic Discriminant Analysis
2023-06-02 17:07:00,648:INFO:Total runtime is 0.47998174031575525 minutes
2023-06-02 17:07:00,648:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:00,648:INFO:Initializing create_model()
2023-06-02 17:07:00,648:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:00,648:INFO:Checking exceptions
2023-06-02 17:07:00,648:INFO:Importing libraries
2023-06-02 17:07:00,648:INFO:Copying training dataset
2023-06-02 17:07:00,652:INFO:Defining folds
2023-06-02 17:07:00,652:INFO:Declaring metric variables
2023-06-02 17:07:00,652:INFO:Importing untrained model
2023-06-02 17:07:00,652:INFO:Quadratic Discriminant Analysis Imported successfully
2023-06-02 17:07:00,652:INFO:Starting cross validation
2023-06-02 17:07:00,653:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:01,746:INFO:Calculating mean and std
2023-06-02 17:07:01,747:INFO:Creating metrics dataframe
2023-06-02 17:07:01,833:INFO:Uploading results into container
2023-06-02 17:07:01,835:INFO:Uploading model into container now
2023-06-02 17:07:01,835:INFO:_master_model_container: 8
2023-06-02 17:07:01,836:INFO:_display_container: 2
2023-06-02 17:07:01,836:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-06-02 17:07:01,836:INFO:create_model() successfully completed......................................
2023-06-02 17:07:02,091:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:02,092:INFO:Creating metrics dataframe
2023-06-02 17:07:02,096:INFO:Initializing Ada Boost Classifier
2023-06-02 17:07:02,096:INFO:Total runtime is 0.5041166305541993 minutes
2023-06-02 17:07:02,096:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:02,096:INFO:Initializing create_model()
2023-06-02 17:07:02,096:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:02,096:INFO:Checking exceptions
2023-06-02 17:07:02,096:INFO:Importing libraries
2023-06-02 17:07:02,096:INFO:Copying training dataset
2023-06-02 17:07:02,109:INFO:Defining folds
2023-06-02 17:07:02,109:INFO:Declaring metric variables
2023-06-02 17:07:02,109:INFO:Importing untrained model
2023-06-02 17:07:02,109:INFO:Ada Boost Classifier Imported successfully
2023-06-02 17:07:02,112:INFO:Starting cross validation
2023-06-02 17:07:02,113:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:03,943:INFO:Calculating mean and std
2023-06-02 17:07:03,945:INFO:Creating metrics dataframe
2023-06-02 17:07:04,038:INFO:Uploading results into container
2023-06-02 17:07:04,038:INFO:Uploading model into container now
2023-06-02 17:07:04,039:INFO:_master_model_container: 9
2023-06-02 17:07:04,039:INFO:_display_container: 2
2023-06-02 17:07:04,039:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3531)
2023-06-02 17:07:04,039:INFO:create_model() successfully completed......................................
2023-06-02 17:07:04,187:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:04,188:INFO:Creating metrics dataframe
2023-06-02 17:07:04,200:INFO:Initializing Gradient Boosting Classifier
2023-06-02 17:07:04,200:INFO:Total runtime is 0.5391773025194805 minutes
2023-06-02 17:07:04,201:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:04,202:INFO:Initializing create_model()
2023-06-02 17:07:04,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:04,202:INFO:Checking exceptions
2023-06-02 17:07:04,202:INFO:Importing libraries
2023-06-02 17:07:04,202:INFO:Copying training dataset
2023-06-02 17:07:04,208:INFO:Defining folds
2023-06-02 17:07:04,209:INFO:Declaring metric variables
2023-06-02 17:07:04,209:INFO:Importing untrained model
2023-06-02 17:07:04,210:INFO:Gradient Boosting Classifier Imported successfully
2023-06-02 17:07:04,210:INFO:Starting cross validation
2023-06-02 17:07:04,212:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:06,070:INFO:Calculating mean and std
2023-06-02 17:07:06,072:INFO:Creating metrics dataframe
2023-06-02 17:07:06,155:INFO:Uploading results into container
2023-06-02 17:07:06,156:INFO:Uploading model into container now
2023-06-02 17:07:06,156:INFO:_master_model_container: 10
2023-06-02 17:07:06,156:INFO:_display_container: 2
2023-06-02 17:07:06,157:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='deviance', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3531, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-06-02 17:07:06,157:INFO:create_model() successfully completed......................................
2023-06-02 17:07:06,331:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:06,331:INFO:Creating metrics dataframe
2023-06-02 17:07:06,337:INFO:Initializing Linear Discriminant Analysis
2023-06-02 17:07:06,337:INFO:Total runtime is 0.5748058756192527 minutes
2023-06-02 17:07:06,338:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:06,338:INFO:Initializing create_model()
2023-06-02 17:07:06,338:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:06,338:INFO:Checking exceptions
2023-06-02 17:07:06,338:INFO:Importing libraries
2023-06-02 17:07:06,338:INFO:Copying training dataset
2023-06-02 17:07:06,342:INFO:Defining folds
2023-06-02 17:07:06,343:INFO:Declaring metric variables
2023-06-02 17:07:06,343:INFO:Importing untrained model
2023-06-02 17:07:06,343:INFO:Linear Discriminant Analysis Imported successfully
2023-06-02 17:07:06,344:INFO:Starting cross validation
2023-06-02 17:07:06,345:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:07,377:INFO:Calculating mean and std
2023-06-02 17:07:07,378:INFO:Creating metrics dataframe
2023-06-02 17:07:07,463:INFO:Uploading results into container
2023-06-02 17:07:07,463:INFO:Uploading model into container now
2023-06-02 17:07:07,463:INFO:_master_model_container: 11
2023-06-02 17:07:07,463:INFO:_display_container: 2
2023-06-02 17:07:07,463:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-06-02 17:07:07,463:INFO:create_model() successfully completed......................................
2023-06-02 17:07:07,612:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:07,612:INFO:Creating metrics dataframe
2023-06-02 17:07:07,622:INFO:Initializing Extra Trees Classifier
2023-06-02 17:07:07,623:INFO:Total runtime is 0.5962340156237286 minutes
2023-06-02 17:07:07,623:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:07,623:INFO:Initializing create_model()
2023-06-02 17:07:07,623:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:07,623:INFO:Checking exceptions
2023-06-02 17:07:07,623:INFO:Importing libraries
2023-06-02 17:07:07,623:INFO:Copying training dataset
2023-06-02 17:07:07,623:INFO:Defining folds
2023-06-02 17:07:07,623:INFO:Declaring metric variables
2023-06-02 17:07:07,623:INFO:Importing untrained model
2023-06-02 17:07:07,623:INFO:Extra Trees Classifier Imported successfully
2023-06-02 17:07:07,623:INFO:Starting cross validation
2023-06-02 17:07:07,623:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:10,274:INFO:Calculating mean and std
2023-06-02 17:07:10,275:INFO:Creating metrics dataframe
2023-06-02 17:07:10,359:INFO:Uploading results into container
2023-06-02 17:07:10,359:INFO:Uploading model into container now
2023-06-02 17:07:10,359:INFO:_master_model_container: 12
2023-06-02 17:07:10,359:INFO:_display_container: 2
2023-06-02 17:07:10,359:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='auto',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=3531, verbose=0, warm_start=False)
2023-06-02 17:07:10,359:INFO:create_model() successfully completed......................................
2023-06-02 17:07:10,487:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:10,487:INFO:Creating metrics dataframe
2023-06-02 17:07:10,487:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 17:07:10,487:INFO:Total runtime is 0.643973747889201 minutes
2023-06-02 17:07:10,487:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:10,487:INFO:Initializing create_model()
2023-06-02 17:07:10,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:10,487:INFO:Checking exceptions
2023-06-02 17:07:10,487:INFO:Importing libraries
2023-06-02 17:07:10,487:INFO:Copying training dataset
2023-06-02 17:07:10,504:INFO:Defining folds
2023-06-02 17:07:10,504:INFO:Declaring metric variables
2023-06-02 17:07:10,504:INFO:Importing untrained model
2023-06-02 17:07:10,504:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 17:07:10,504:INFO:Starting cross validation
2023-06-02 17:07:10,504:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:11,703:INFO:Calculating mean and std
2023-06-02 17:07:11,704:INFO:Creating metrics dataframe
2023-06-02 17:07:11,879:INFO:Uploading results into container
2023-06-02 17:07:11,879:INFO:Uploading model into container now
2023-06-02 17:07:11,879:INFO:_master_model_container: 13
2023-06-02 17:07:11,879:INFO:_display_container: 2
2023-06-02 17:07:11,879:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3531, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-02 17:07:11,879:INFO:create_model() successfully completed......................................
2023-06-02 17:07:12,015:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:12,015:INFO:Creating metrics dataframe
2023-06-02 17:07:12,015:INFO:Initializing Dummy Classifier
2023-06-02 17:07:12,015:INFO:Total runtime is 0.6694347461064658 minutes
2023-06-02 17:07:12,015:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:12,015:INFO:Initializing create_model()
2023-06-02 17:07:12,015:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FFFDB220>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:12,015:INFO:Checking exceptions
2023-06-02 17:07:12,015:INFO:Importing libraries
2023-06-02 17:07:12,015:INFO:Copying training dataset
2023-06-02 17:07:12,015:INFO:Defining folds
2023-06-02 17:07:12,015:INFO:Declaring metric variables
2023-06-02 17:07:12,015:INFO:Importing untrained model
2023-06-02 17:07:12,015:INFO:Dummy Classifier Imported successfully
2023-06-02 17:07:12,015:INFO:Starting cross validation
2023-06-02 17:07:12,015:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:12,134:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,141:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,164:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,205:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,363:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,375:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,438:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,454:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,601:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:12,613:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:07:13,027:INFO:Calculating mean and std
2023-06-02 17:07:13,027:INFO:Creating metrics dataframe
2023-06-02 17:07:13,131:INFO:Uploading results into container
2023-06-02 17:07:13,136:INFO:Uploading model into container now
2023-06-02 17:07:13,137:INFO:_master_model_container: 14
2023-06-02 17:07:13,137:INFO:_display_container: 2
2023-06-02 17:07:13,137:INFO:DummyClassifier(constant=None, random_state=3531, strategy='prior')
2023-06-02 17:07:13,137:INFO:create_model() successfully completed......................................
2023-06-02 17:07:13,313:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:13,313:INFO:Creating metrics dataframe
2023-06-02 17:07:13,325:INFO:Initializing create_model()
2023-06-02 17:07:13,325:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4808B2AC0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='deviance', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3531, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:13,325:INFO:Checking exceptions
2023-06-02 17:07:13,328:INFO:Importing libraries
2023-06-02 17:07:13,328:INFO:Copying training dataset
2023-06-02 17:07:13,333:INFO:Defining folds
2023-06-02 17:07:13,333:INFO:Declaring metric variables
2023-06-02 17:07:13,333:INFO:Importing untrained model
2023-06-02 17:07:13,333:INFO:Declaring custom model
2023-06-02 17:07:13,334:INFO:Gradient Boosting Classifier Imported successfully
2023-06-02 17:07:13,334:INFO:Cross validation set to False
2023-06-02 17:07:13,334:INFO:Fitting Model
2023-06-02 17:07:13,670:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='deviance', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3531, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-06-02 17:07:13,670:INFO:create_model() successfully completed......................................
2023-06-02 17:07:13,835:INFO:_master_model_container: 14
2023-06-02 17:07:13,835:INFO:_display_container: 2
2023-06-02 17:07:13,835:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='deviance', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3531, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-06-02 17:07:13,835:INFO:compare_models() successfully completed......................................
2023-06-02 17:07:38,289:INFO:PyCaret ClassificationExperiment
2023-06-02 17:07:38,289:INFO:Logging name: clf-default-name
2023-06-02 17:07:38,289:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-06-02 17:07:38,289:INFO:version 3.0.2
2023-06-02 17:07:38,289:INFO:Initializing setup()
2023-06-02 17:07:38,289:INFO:self.USI: 71db
2023-06-02 17:07:38,289:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_groups_param', 'y', 'data', 'y_test', 'y_train', 'seed', 'target_param', 'idx', '_available_plots', 'pipeline', 'USI', '_ml_usecase', 'X_train', 'n_jobs_param', 'memory', 'logging_param', 'fold_shuffle_param', 'is_multiclass', 'X', 'html_param', 'X_test', 'log_plots_param', 'fix_imbalance', 'exp_name_log', 'gpu_param', 'fold_generator', 'exp_id'}
2023-06-02 17:07:38,289:INFO:Checking environment
2023-06-02 17:07:38,289:INFO:python_version: 3.9.12
2023-06-02 17:07:38,289:INFO:python_build: ('main', 'Apr  4 2022 05:22:27')
2023-06-02 17:07:38,289:INFO:machine: AMD64
2023-06-02 17:07:38,289:INFO:platform: Windows-10-10.0.22621-SP0
2023-06-02 17:07:38,305:INFO:Memory: svmem(total=8345964544, available=760451072, percent=90.9, used=7585513472, free=760451072)
2023-06-02 17:07:38,305:INFO:Physical Core: 2
2023-06-02 17:07:38,305:INFO:Logical Core: 4
2023-06-02 17:07:38,305:INFO:Checking libraries
2023-06-02 17:07:38,305:INFO:System:
2023-06-02 17:07:38,305:INFO:    python: 3.9.12 (main, Apr  4 2022, 05:22:27) [MSC v.1916 64 bit (AMD64)]
2023-06-02 17:07:38,305:INFO:executable: C:\Users\DELL\anaconda3\python.exe
2023-06-02 17:07:38,305:INFO:   machine: Windows-10-10.0.22621-SP0
2023-06-02 17:07:38,305:INFO:PyCaret required dependencies:
2023-06-02 17:07:38,307:INFO:                 pip: 21.2.4
2023-06-02 17:07:38,307:INFO:          setuptools: 61.2.0
2023-06-02 17:07:38,307:INFO:             pycaret: 3.0.2
2023-06-02 17:07:38,307:INFO:             IPython: 8.2.0
2023-06-02 17:07:38,307:INFO:          ipywidgets: 7.6.5
2023-06-02 17:07:38,307:INFO:                tqdm: 4.64.0
2023-06-02 17:07:38,307:INFO:               numpy: 1.21.6
2023-06-02 17:07:38,307:INFO:              pandas: 1.4.2
2023-06-02 17:07:38,307:INFO:              jinja2: 2.11.3
2023-06-02 17:07:38,307:INFO:               scipy: 1.7.3
2023-06-02 17:07:38,307:INFO:              joblib: 1.2.0
2023-06-02 17:07:38,307:INFO:             sklearn: 1.0.2
2023-06-02 17:07:38,308:INFO:                pyod: 1.0.9
2023-06-02 17:07:38,308:INFO:            imblearn: 0.10.1
2023-06-02 17:07:38,308:INFO:   category_encoders: 2.6.1
2023-06-02 17:07:38,308:INFO:            lightgbm: 3.3.5
2023-06-02 17:07:38,308:INFO:               numba: 0.55.1
2023-06-02 17:07:38,308:INFO:            requests: 2.27.1
2023-06-02 17:07:38,308:INFO:          matplotlib: 3.5.1
2023-06-02 17:07:38,308:INFO:          scikitplot: 0.3.7
2023-06-02 17:07:38,308:INFO:         yellowbrick: 1.5
2023-06-02 17:07:38,308:INFO:              plotly: 5.6.0
2023-06-02 17:07:38,308:INFO:             kaleido: 0.2.1
2023-06-02 17:07:38,308:INFO:         statsmodels: 0.13.2
2023-06-02 17:07:38,308:INFO:              sktime: 0.17.0
2023-06-02 17:07:38,308:INFO:               tbats: 1.1.3
2023-06-02 17:07:38,309:INFO:            pmdarima: 2.0.3
2023-06-02 17:07:38,309:INFO:              psutil: 5.9.5
2023-06-02 17:07:38,309:INFO:PyCaret optional dependencies:
2023-06-02 17:07:38,309:INFO:                shap: Not installed
2023-06-02 17:07:38,309:INFO:           interpret: Not installed
2023-06-02 17:07:38,309:INFO:                umap: Not installed
2023-06-02 17:07:38,309:INFO:    pandas_profiling: 4.2.0
2023-06-02 17:07:38,309:INFO:  explainerdashboard: Not installed
2023-06-02 17:07:38,310:INFO:             autoviz: Not installed
2023-06-02 17:07:38,310:INFO:           fairlearn: Not installed
2023-06-02 17:07:38,310:INFO:             xgboost: Not installed
2023-06-02 17:07:38,310:INFO:            catboost: Not installed
2023-06-02 17:07:38,310:INFO:              kmodes: Not installed
2023-06-02 17:07:38,310:INFO:             mlxtend: Not installed
2023-06-02 17:07:38,310:INFO:       statsforecast: Not installed
2023-06-02 17:07:38,310:INFO:        tune_sklearn: Not installed
2023-06-02 17:07:38,310:INFO:                 ray: Not installed
2023-06-02 17:07:38,310:INFO:            hyperopt: Not installed
2023-06-02 17:07:38,310:INFO:              optuna: Not installed
2023-06-02 17:07:38,310:INFO:               skopt: Not installed
2023-06-02 17:07:38,310:INFO:              mlflow: Not installed
2023-06-02 17:07:38,310:INFO:              gradio: Not installed
2023-06-02 17:07:38,310:INFO:             fastapi: Not installed
2023-06-02 17:07:38,310:INFO:             uvicorn: Not installed
2023-06-02 17:07:38,310:INFO:              m2cgen: Not installed
2023-06-02 17:07:38,310:INFO:           evidently: Not installed
2023-06-02 17:07:38,310:INFO:               fugue: Not installed
2023-06-02 17:07:38,310:INFO:           streamlit: 1.23.1
2023-06-02 17:07:38,310:INFO:             prophet: Not installed
2023-06-02 17:07:38,310:INFO:None
2023-06-02 17:07:38,310:INFO:Set up data.
2023-06-02 17:07:38,310:INFO:Set up train/test split.
2023-06-02 17:07:38,323:INFO:Set up index.
2023-06-02 17:07:38,323:INFO:Set up folding strategy.
2023-06-02 17:07:38,323:INFO:Assigning column types.
2023-06-02 17:07:38,323:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-06-02 17:07:38,408:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,409:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,490:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,490:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,539:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,539:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,539:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-06-02 17:07:38,603:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,634:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,634:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-06-02 17:07:38,735:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,736:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,736:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-06-02 17:07:38,832:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,832:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:38,954:INFO:Preparing preprocessing pipeline...
2023-06-02 17:07:38,954:INFO:Set up simple imputation.
2023-06-02 17:07:38,970:INFO:Finished creating preprocessing pipeline.
2023-06-02 17:07:38,970:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose=0))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose=0)))],
         verbose=False)
2023-06-02 17:07:38,970:INFO:Creating final display dataframe.
2023-06-02 17:07:39,033:INFO:Setup _display_container:                     Description             Value
0                    Session id              7849
1                        Target           Outcome
2                   Target type            Binary
3           Original data shape          (768, 9)
4        Transformed data shape          (768, 9)
5   Transformed train set shape          (537, 9)
6    Transformed test set shape          (231, 9)
7              Numeric features                 8
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              71db
2023-06-02 17:07:39,142:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:39,142:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:39,249:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:39,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-06-02 17:07:39,249:INFO:setup() successfully completed in 1.04s...............
2023-06-02 17:07:39,265:INFO:Initializing compare_models()
2023-06-02 17:07:39,265:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-06-02 17:07:39,265:INFO:Checking exceptions
2023-06-02 17:07:39,270:INFO:Preparing display monitor
2023-06-02 17:07:39,273:INFO:Initializing Logistic Regression
2023-06-02 17:07:39,273:INFO:Total runtime is 0.0 minutes
2023-06-02 17:07:39,273:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:39,274:INFO:Initializing create_model()
2023-06-02 17:07:39,274:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:39,274:INFO:Checking exceptions
2023-06-02 17:07:39,274:INFO:Importing libraries
2023-06-02 17:07:39,274:INFO:Copying training dataset
2023-06-02 17:07:39,279:INFO:Defining folds
2023-06-02 17:07:39,279:INFO:Declaring metric variables
2023-06-02 17:07:39,279:INFO:Importing untrained model
2023-06-02 17:07:39,280:INFO:Logistic Regression Imported successfully
2023-06-02 17:07:39,280:INFO:Starting cross validation
2023-06-02 17:07:39,281:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:40,419:INFO:Calculating mean and std
2023-06-02 17:07:40,419:INFO:Creating metrics dataframe
2023-06-02 17:07:40,530:INFO:Uploading results into container
2023-06-02 17:07:40,530:INFO:Uploading model into container now
2023-06-02 17:07:40,530:INFO:_master_model_container: 1
2023-06-02 17:07:40,530:INFO:_display_container: 2
2023-06-02 17:07:40,530:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-02 17:07:40,530:INFO:create_model() successfully completed......................................
2023-06-02 17:07:40,666:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:40,666:INFO:Creating metrics dataframe
2023-06-02 17:07:40,681:INFO:Initializing K Neighbors Classifier
2023-06-02 17:07:40,681:INFO:Total runtime is 0.023461782932281496 minutes
2023-06-02 17:07:40,681:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:40,681:INFO:Initializing create_model()
2023-06-02 17:07:40,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:40,681:INFO:Checking exceptions
2023-06-02 17:07:40,681:INFO:Importing libraries
2023-06-02 17:07:40,681:INFO:Copying training dataset
2023-06-02 17:07:40,681:INFO:Defining folds
2023-06-02 17:07:40,681:INFO:Declaring metric variables
2023-06-02 17:07:40,681:INFO:Importing untrained model
2023-06-02 17:07:40,681:INFO:K Neighbors Classifier Imported successfully
2023-06-02 17:07:40,681:INFO:Starting cross validation
2023-06-02 17:07:40,681:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:41,650:INFO:Calculating mean and std
2023-06-02 17:07:41,665:INFO:Creating metrics dataframe
2023-06-02 17:07:41,794:INFO:Uploading results into container
2023-06-02 17:07:41,794:INFO:Uploading model into container now
2023-06-02 17:07:41,794:INFO:_master_model_container: 2
2023-06-02 17:07:41,794:INFO:_display_container: 2
2023-06-02 17:07:41,794:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-06-02 17:07:41,794:INFO:create_model() successfully completed......................................
2023-06-02 17:07:41,945:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:41,945:INFO:Creating metrics dataframe
2023-06-02 17:07:41,949:INFO:Initializing Naive Bayes
2023-06-02 17:07:41,949:INFO:Total runtime is 0.04459412097930908 minutes
2023-06-02 17:07:41,950:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:41,950:INFO:Initializing create_model()
2023-06-02 17:07:41,950:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:41,950:INFO:Checking exceptions
2023-06-02 17:07:41,950:INFO:Importing libraries
2023-06-02 17:07:41,950:INFO:Copying training dataset
2023-06-02 17:07:41,959:INFO:Defining folds
2023-06-02 17:07:41,959:INFO:Declaring metric variables
2023-06-02 17:07:41,959:INFO:Importing untrained model
2023-06-02 17:07:41,960:INFO:Naive Bayes Imported successfully
2023-06-02 17:07:41,960:INFO:Starting cross validation
2023-06-02 17:07:41,962:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:43,018:INFO:Calculating mean and std
2023-06-02 17:07:43,018:INFO:Creating metrics dataframe
2023-06-02 17:07:43,158:INFO:Uploading results into container
2023-06-02 17:07:43,159:INFO:Uploading model into container now
2023-06-02 17:07:43,159:INFO:_master_model_container: 3
2023-06-02 17:07:43,159:INFO:_display_container: 2
2023-06-02 17:07:43,160:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-06-02 17:07:43,160:INFO:create_model() successfully completed......................................
2023-06-02 17:07:43,301:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:43,301:INFO:Creating metrics dataframe
2023-06-02 17:07:43,301:INFO:Initializing Decision Tree Classifier
2023-06-02 17:07:43,301:INFO:Total runtime is 0.06712307532628377 minutes
2023-06-02 17:07:43,301:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:43,301:INFO:Initializing create_model()
2023-06-02 17:07:43,301:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:43,317:INFO:Checking exceptions
2023-06-02 17:07:43,317:INFO:Importing libraries
2023-06-02 17:07:43,317:INFO:Copying training dataset
2023-06-02 17:07:43,317:INFO:Defining folds
2023-06-02 17:07:43,317:INFO:Declaring metric variables
2023-06-02 17:07:43,317:INFO:Importing untrained model
2023-06-02 17:07:43,317:INFO:Decision Tree Classifier Imported successfully
2023-06-02 17:07:43,317:INFO:Starting cross validation
2023-06-02 17:07:43,317:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:44,219:INFO:Calculating mean and std
2023-06-02 17:07:44,219:INFO:Creating metrics dataframe
2023-06-02 17:07:44,365:INFO:Uploading results into container
2023-06-02 17:07:44,365:INFO:Uploading model into container now
2023-06-02 17:07:44,366:INFO:_master_model_container: 4
2023-06-02 17:07:44,366:INFO:_display_container: 2
2023-06-02 17:07:44,366:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7849, splitter='best')
2023-06-02 17:07:44,366:INFO:create_model() successfully completed......................................
2023-06-02 17:07:44,481:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:44,492:INFO:Creating metrics dataframe
2023-06-02 17:07:44,496:INFO:Initializing SVM - Linear Kernel
2023-06-02 17:07:44,496:INFO:Total runtime is 0.08704732259114584 minutes
2023-06-02 17:07:44,496:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:44,496:INFO:Initializing create_model()
2023-06-02 17:07:44,496:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:44,496:INFO:Checking exceptions
2023-06-02 17:07:44,496:INFO:Importing libraries
2023-06-02 17:07:44,496:INFO:Copying training dataset
2023-06-02 17:07:44,496:INFO:Defining folds
2023-06-02 17:07:44,496:INFO:Declaring metric variables
2023-06-02 17:07:44,496:INFO:Importing untrained model
2023-06-02 17:07:44,496:INFO:SVM - Linear Kernel Imported successfully
2023-06-02 17:07:44,496:INFO:Starting cross validation
2023-06-02 17:07:44,496:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:44,572:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,587:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,596:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,619:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,771:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,818:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,834:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,881:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:44,997:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:45,008:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\utils\metaestimators.py", line 109, in __get__
    if not self.check(obj):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\linear_model\_stochastic_gradient.py", line 1199, in _check_proba
    raise AttributeError(
AttributeError: probability estimates are not available for loss='hinge'

  warnings.warn(

2023-06-02 17:07:45,397:INFO:Calculating mean and std
2023-06-02 17:07:45,481:INFO:Creating metrics dataframe
2023-06-02 17:07:45,597:INFO:Uploading results into container
2023-06-02 17:07:45,603:INFO:Uploading model into container now
2023-06-02 17:07:45,603:INFO:_master_model_container: 5
2023-06-02 17:07:45,603:INFO:_display_container: 2
2023-06-02 17:07:45,603:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=7849, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2023-06-02 17:07:45,603:INFO:create_model() successfully completed......................................
2023-06-02 17:07:45,758:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:45,759:INFO:Creating metrics dataframe
2023-06-02 17:07:45,770:INFO:Initializing Ridge Classifier
2023-06-02 17:07:45,770:INFO:Total runtime is 0.10827119350433351 minutes
2023-06-02 17:07:45,770:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:45,771:INFO:Initializing create_model()
2023-06-02 17:07:45,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:45,771:INFO:Checking exceptions
2023-06-02 17:07:45,771:INFO:Importing libraries
2023-06-02 17:07:45,771:INFO:Copying training dataset
2023-06-02 17:07:45,771:INFO:Defining folds
2023-06-02 17:07:45,771:INFO:Declaring metric variables
2023-06-02 17:07:45,771:INFO:Importing untrained model
2023-06-02 17:07:45,771:INFO:Ridge Classifier Imported successfully
2023-06-02 17:07:45,771:INFO:Starting cross validation
2023-06-02 17:07:45,771:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:45,885:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:45,898:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:45,898:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,098:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,103:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,103:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,135:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,281:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,281:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 71, in _cached_call
    return cache[method]
KeyError: 'predict_proba'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\metrics.py", line 130, in _score
    return super()._score(
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 298, in _score
    y_pred = method_caller(clf, "predict_proba", X)
  File "C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_scorer.py", line 73, in _cached_call
    result = getattr(estimator, method)(*args, **kwargs)
  File "C:\Users\DELL\anaconda3\lib\site-packages\pycaret\internal\pipeline.py", line 121, in __getattr__
    return getattr(self._final_estimator, name)
AttributeError: 'RidgeClassifier' object has no attribute 'predict_proba'

  warnings.warn(

2023-06-02 17:07:46,650:INFO:Calculating mean and std
2023-06-02 17:07:46,650:INFO:Creating metrics dataframe
2023-06-02 17:07:46,761:INFO:Uploading results into container
2023-06-02 17:07:46,762:INFO:Uploading model into container now
2023-06-02 17:07:46,763:INFO:_master_model_container: 6
2023-06-02 17:07:46,763:INFO:_display_container: 2
2023-06-02 17:07:46,764:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, normalize='deprecated', positive=False,
                random_state=7849, solver='auto', tol=0.001)
2023-06-02 17:07:46,764:INFO:create_model() successfully completed......................................
2023-06-02 17:07:46,921:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:46,921:INFO:Creating metrics dataframe
2023-06-02 17:07:46,941:INFO:Initializing Random Forest Classifier
2023-06-02 17:07:46,941:INFO:Total runtime is 0.12779441674550376 minutes
2023-06-02 17:07:46,942:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:46,942:INFO:Initializing create_model()
2023-06-02 17:07:46,943:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:46,943:INFO:Checking exceptions
2023-06-02 17:07:46,943:INFO:Importing libraries
2023-06-02 17:07:46,943:INFO:Copying training dataset
2023-06-02 17:07:46,950:INFO:Defining folds
2023-06-02 17:07:46,950:INFO:Declaring metric variables
2023-06-02 17:07:46,950:INFO:Importing untrained model
2023-06-02 17:07:46,951:INFO:Random Forest Classifier Imported successfully
2023-06-02 17:07:46,952:INFO:Starting cross validation
2023-06-02 17:07:46,953:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:49,523:INFO:Calculating mean and std
2023-06-02 17:07:49,523:INFO:Creating metrics dataframe
2023-06-02 17:07:49,666:INFO:Uploading results into container
2023-06-02 17:07:49,666:INFO:Uploading model into container now
2023-06-02 17:07:49,666:INFO:_master_model_container: 7
2023-06-02 17:07:49,666:INFO:_display_container: 2
2023-06-02 17:07:49,666:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='auto',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=100, n_jobs=-1, oob_score=False,
                       random_state=7849, verbose=0, warm_start=False)
2023-06-02 17:07:49,666:INFO:create_model() successfully completed......................................
2023-06-02 17:07:49,803:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:49,803:INFO:Creating metrics dataframe
2023-06-02 17:07:49,819:INFO:Initializing Quadratic Discriminant Analysis
2023-06-02 17:07:49,819:INFO:Total runtime is 0.17575425704320274 minutes
2023-06-02 17:07:49,819:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:49,819:INFO:Initializing create_model()
2023-06-02 17:07:49,819:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:49,819:INFO:Checking exceptions
2023-06-02 17:07:49,819:INFO:Importing libraries
2023-06-02 17:07:49,819:INFO:Copying training dataset
2023-06-02 17:07:49,819:INFO:Defining folds
2023-06-02 17:07:49,819:INFO:Declaring metric variables
2023-06-02 17:07:49,819:INFO:Importing untrained model
2023-06-02 17:07:49,819:INFO:Quadratic Discriminant Analysis Imported successfully
2023-06-02 17:07:49,819:INFO:Starting cross validation
2023-06-02 17:07:49,834:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:50,801:INFO:Calculating mean and std
2023-06-02 17:07:50,802:INFO:Creating metrics dataframe
2023-06-02 17:07:50,937:INFO:Uploading results into container
2023-06-02 17:07:50,938:INFO:Uploading model into container now
2023-06-02 17:07:50,938:INFO:_master_model_container: 8
2023-06-02 17:07:50,938:INFO:_display_container: 2
2023-06-02 17:07:50,939:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2023-06-02 17:07:50,939:INFO:create_model() successfully completed......................................
2023-06-02 17:07:51,114:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:51,114:INFO:Creating metrics dataframe
2023-06-02 17:07:51,124:INFO:Initializing Ada Boost Classifier
2023-06-02 17:07:51,125:INFO:Total runtime is 0.19751834472020469 minutes
2023-06-02 17:07:51,125:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:51,125:INFO:Initializing create_model()
2023-06-02 17:07:51,125:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:51,125:INFO:Checking exceptions
2023-06-02 17:07:51,125:INFO:Importing libraries
2023-06-02 17:07:51,125:INFO:Copying training dataset
2023-06-02 17:07:51,129:INFO:Defining folds
2023-06-02 17:07:51,129:INFO:Declaring metric variables
2023-06-02 17:07:51,130:INFO:Importing untrained model
2023-06-02 17:07:51,130:INFO:Ada Boost Classifier Imported successfully
2023-06-02 17:07:51,131:INFO:Starting cross validation
2023-06-02 17:07:51,133:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:52,897:INFO:Calculating mean and std
2023-06-02 17:07:52,897:INFO:Creating metrics dataframe
2023-06-02 17:07:53,004:INFO:Uploading results into container
2023-06-02 17:07:53,004:INFO:Uploading model into container now
2023-06-02 17:07:53,004:INFO:_master_model_container: 9
2023-06-02 17:07:53,004:INFO:_display_container: 2
2023-06-02 17:07:53,004:INFO:AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=7849)
2023-06-02 17:07:53,004:INFO:create_model() successfully completed......................................
2023-06-02 17:07:53,154:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:53,154:INFO:Creating metrics dataframe
2023-06-02 17:07:53,165:INFO:Initializing Gradient Boosting Classifier
2023-06-02 17:07:53,165:INFO:Total runtime is 0.23152847290039064 minutes
2023-06-02 17:07:53,166:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:53,167:INFO:Initializing create_model()
2023-06-02 17:07:53,167:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:53,167:INFO:Checking exceptions
2023-06-02 17:07:53,167:INFO:Importing libraries
2023-06-02 17:07:53,167:INFO:Copying training dataset
2023-06-02 17:07:53,171:INFO:Defining folds
2023-06-02 17:07:53,171:INFO:Declaring metric variables
2023-06-02 17:07:53,171:INFO:Importing untrained model
2023-06-02 17:07:53,171:INFO:Gradient Boosting Classifier Imported successfully
2023-06-02 17:07:53,171:INFO:Starting cross validation
2023-06-02 17:07:53,171:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:54,994:INFO:Calculating mean and std
2023-06-02 17:07:54,995:INFO:Creating metrics dataframe
2023-06-02 17:07:55,171:INFO:Uploading results into container
2023-06-02 17:07:55,171:INFO:Uploading model into container now
2023-06-02 17:07:55,171:INFO:_master_model_container: 10
2023-06-02 17:07:55,171:INFO:_display_container: 2
2023-06-02 17:07:55,171:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='deviance', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7849, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2023-06-02 17:07:55,171:INFO:create_model() successfully completed......................................
2023-06-02 17:07:55,312:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:55,312:INFO:Creating metrics dataframe
2023-06-02 17:07:55,312:INFO:Initializing Linear Discriminant Analysis
2023-06-02 17:07:55,312:INFO:Total runtime is 0.2673166632652283 minutes
2023-06-02 17:07:55,312:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:55,312:INFO:Initializing create_model()
2023-06-02 17:07:55,312:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:55,312:INFO:Checking exceptions
2023-06-02 17:07:55,312:INFO:Importing libraries
2023-06-02 17:07:55,312:INFO:Copying training dataset
2023-06-02 17:07:55,312:INFO:Defining folds
2023-06-02 17:07:55,312:INFO:Declaring metric variables
2023-06-02 17:07:55,312:INFO:Importing untrained model
2023-06-02 17:07:55,312:INFO:Linear Discriminant Analysis Imported successfully
2023-06-02 17:07:55,312:INFO:Starting cross validation
2023-06-02 17:07:55,312:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:56,281:INFO:Calculating mean and std
2023-06-02 17:07:56,281:INFO:Creating metrics dataframe
2023-06-02 17:07:56,449:INFO:Uploading results into container
2023-06-02 17:07:56,449:INFO:Uploading model into container now
2023-06-02 17:07:56,449:INFO:_master_model_container: 11
2023-06-02 17:07:56,449:INFO:_display_container: 2
2023-06-02 17:07:56,449:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2023-06-02 17:07:56,449:INFO:create_model() successfully completed......................................
2023-06-02 17:07:56,620:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:56,620:INFO:Creating metrics dataframe
2023-06-02 17:07:56,620:INFO:Initializing Extra Trees Classifier
2023-06-02 17:07:56,620:INFO:Total runtime is 0.28910488287607833 minutes
2023-06-02 17:07:56,620:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:56,620:INFO:Initializing create_model()
2023-06-02 17:07:56,620:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:56,620:INFO:Checking exceptions
2023-06-02 17:07:56,620:INFO:Importing libraries
2023-06-02 17:07:56,620:INFO:Copying training dataset
2023-06-02 17:07:56,620:INFO:Defining folds
2023-06-02 17:07:56,620:INFO:Declaring metric variables
2023-06-02 17:07:56,620:INFO:Importing untrained model
2023-06-02 17:07:56,620:INFO:Extra Trees Classifier Imported successfully
2023-06-02 17:07:56,620:INFO:Starting cross validation
2023-06-02 17:07:56,620:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:07:59,173:INFO:Calculating mean and std
2023-06-02 17:07:59,179:INFO:Creating metrics dataframe
2023-06-02 17:07:59,341:INFO:Uploading results into container
2023-06-02 17:07:59,342:INFO:Uploading model into container now
2023-06-02 17:07:59,342:INFO:_master_model_container: 12
2023-06-02 17:07:59,342:INFO:_display_container: 2
2023-06-02 17:07:59,343:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='auto',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     n_estimators=100, n_jobs=-1, oob_score=False,
                     random_state=7849, verbose=0, warm_start=False)
2023-06-02 17:07:59,343:INFO:create_model() successfully completed......................................
2023-06-02 17:07:59,512:INFO:SubProcess create_model() end ==================================
2023-06-02 17:07:59,512:INFO:Creating metrics dataframe
2023-06-02 17:07:59,512:INFO:Initializing Light Gradient Boosting Machine
2023-06-02 17:07:59,512:INFO:Total runtime is 0.33731089035669964 minutes
2023-06-02 17:07:59,512:INFO:SubProcess create_model() called ==================================
2023-06-02 17:07:59,512:INFO:Initializing create_model()
2023-06-02 17:07:59,512:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:07:59,512:INFO:Checking exceptions
2023-06-02 17:07:59,512:INFO:Importing libraries
2023-06-02 17:07:59,512:INFO:Copying training dataset
2023-06-02 17:07:59,512:INFO:Defining folds
2023-06-02 17:07:59,512:INFO:Declaring metric variables
2023-06-02 17:07:59,512:INFO:Importing untrained model
2023-06-02 17:07:59,512:INFO:Light Gradient Boosting Machine Imported successfully
2023-06-02 17:07:59,512:INFO:Starting cross validation
2023-06-02 17:07:59,512:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:08:00,770:INFO:Calculating mean and std
2023-06-02 17:08:00,770:INFO:Creating metrics dataframe
2023-06-02 17:08:00,971:INFO:Uploading results into container
2023-06-02 17:08:00,986:INFO:Uploading model into container now
2023-06-02 17:08:00,986:INFO:_master_model_container: 13
2023-06-02 17:08:00,986:INFO:_display_container: 2
2023-06-02 17:08:00,986:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=7849, reg_alpha=0.0, reg_lambda=0.0, silent='warn',
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2023-06-02 17:08:00,986:INFO:create_model() successfully completed......................................
2023-06-02 17:08:01,137:INFO:SubProcess create_model() end ==================================
2023-06-02 17:08:01,137:INFO:Creating metrics dataframe
2023-06-02 17:08:01,141:INFO:Initializing Dummy Classifier
2023-06-02 17:08:01,141:INFO:Total runtime is 0.36446336507797245 minutes
2023-06-02 17:08:01,141:INFO:SubProcess create_model() called ==================================
2023-06-02 17:08:01,142:INFO:Initializing create_model()
2023-06-02 17:08:01,142:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001D4FEF22DC0>, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:08:01,142:INFO:Checking exceptions
2023-06-02 17:08:01,142:INFO:Importing libraries
2023-06-02 17:08:01,142:INFO:Copying training dataset
2023-06-02 17:08:01,145:INFO:Defining folds
2023-06-02 17:08:01,145:INFO:Declaring metric variables
2023-06-02 17:08:01,145:INFO:Importing untrained model
2023-06-02 17:08:01,146:INFO:Dummy Classifier Imported successfully
2023-06-02 17:08:01,146:INFO:Starting cross validation
2023-06-02 17:08:01,147:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-06-02 17:08:01,233:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,249:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,280:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,313:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,442:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,530:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,569:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,613:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,741:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:01,772:WARNING:C:\Users\DELL\anaconda3\lib\site-packages\sklearn\metrics\_classification.py:1318: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-06-02 17:08:02,250:INFO:Calculating mean and std
2023-06-02 17:08:02,250:INFO:Creating metrics dataframe
2023-06-02 17:08:02,418:INFO:Uploading results into container
2023-06-02 17:08:02,418:INFO:Uploading model into container now
2023-06-02 17:08:02,418:INFO:_master_model_container: 14
2023-06-02 17:08:02,418:INFO:_display_container: 2
2023-06-02 17:08:02,418:INFO:DummyClassifier(constant=None, random_state=7849, strategy='prior')
2023-06-02 17:08:02,418:INFO:create_model() successfully completed......................................
2023-06-02 17:08:02,587:INFO:SubProcess create_model() end ==================================
2023-06-02 17:08:02,603:INFO:Creating metrics dataframe
2023-06-02 17:08:02,619:INFO:Initializing create_model()
2023-06-02 17:08:02,619:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D4FDB434C0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, kwargs={})
2023-06-02 17:08:02,619:INFO:Checking exceptions
2023-06-02 17:08:02,619:INFO:Importing libraries
2023-06-02 17:08:02,619:INFO:Copying training dataset
2023-06-02 17:08:02,634:INFO:Defining folds
2023-06-02 17:08:02,634:INFO:Declaring metric variables
2023-06-02 17:08:02,634:INFO:Importing untrained model
2023-06-02 17:08:02,634:INFO:Declaring custom model
2023-06-02 17:08:02,634:INFO:Logistic Regression Imported successfully
2023-06-02 17:08:02,634:INFO:Cross validation set to False
2023-06-02 17:08:02,634:INFO:Fitting Model
2023-06-02 17:08:02,785:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-02 17:08:02,785:INFO:create_model() successfully completed......................................
2023-06-02 17:08:02,938:INFO:_master_model_container: 14
2023-06-02 17:08:02,938:INFO:_display_container: 2
2023-06-02 17:08:02,938:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-06-02 17:08:02,938:INFO:compare_models() successfully completed......................................
2023-06-02 17:08:02,945:INFO:Initializing save_model()
2023-06-02 17:08:02,945:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7849, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose=0))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2023-06-02 17:08:02,946:INFO:Adding model into prep_pipe
2023-06-02 17:08:02,950:INFO:best_model.pkl saved in current working directory
2023-06-02 17:08:02,956:INFO:Pipeline(memory=FastMemory(location=C:\Users\DELL\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Pregnancies', 'Glucose',
                                             'BloodPressure', 'SkinThickness',
                                             'Insulin', 'BMI',
                                             'DiabetesPedigreeFunction',
                                             'Age'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strateg...
                                                              copy=True,
                                                              fill_value=None,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose=0))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=7849,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2023-06-02 17:08:02,956:INFO:save_model() successfully completed......................................
